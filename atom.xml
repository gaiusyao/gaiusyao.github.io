<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尧翔的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-28T13:17:29.899Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gaius Yao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>03.字典</title>
    <link href="http://yoursite.com/2017/10/28/dictionaries/"/>
    <id>http://yoursite.com/2017/10/28/dictionaries/</id>
    <published>2017-10-28T13:17:18.000Z</published>
    <updated>2017-10-28T13:17:29.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-字典-Dictionaries-简介"><a href="#3-1-字典-Dictionaries-简介" class="headerlink" title="3.1 字典(Dictionaries)简介"></a>3.1 字典(Dictionaries)简介</h2><p>  Python中的字典本质上是包含各种带有唯一标识符的成对信息的列表，可以理解为是一系列的<strong>键—值对</strong>，但与列表不同的是，字典是以<strong>键</strong>（整数、字符串、列表、字典或其他Python 对象）而非索引来引用某个元素，在唯一键值比连续整数更能反映出变量值含义的情况下，这个特点使字典比列表更实用。另外，字典是由花括号<code>{}</code>括起的，而非列表的中括号<code>[]</code>。而更为关键的是，字典不同于列表，字典是没有内置排序的，而列表会根据索引值（连续整数）进行隐式排序，这让字典可以很方便快速的进行搜索或添加操作（计算机不需要重新分配索引），这也让字典比列表更适合处理数据量多的情况。下面是一个简单的字典示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">simple_dict = &#123;<span class="string">'one'</span>:1, <span class="string">'two'</span>:2, <span class="string">'three'</span>:3&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #1: &#123;0&#125;"</span>.format(simple_dict)) <span class="comment">#将字典打印出来，包括花括号</span></div></pre></td></tr></table></figure></p><h2 id="3-2-使用字典"><a href="#3-2-使用字典" class="headerlink" title="3.2 使用字典"></a>3.2 使用字典</h2><h3 id="3-2-1-访问字典中的值"><a href="#3-2-1-访问字典中的值" class="headerlink" title="3.2.1 访问字典中的值"></a>3.2.1 访问字典中的值</h3><p>  要获取与键相关联的值，可依次指定字典名和放在方括号内的键<code>dict_name[key]</code>，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ninja_turtle_0 = &#123;<span class="string">'name'</span>:<span class="string">'Leonardo'</span>, <span class="string">'color'</span>:<span class="string">'blue'</span>, <span class="string">'weapon'</span>:<span class="string">'katana'</span>&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #2: &#123;0&#125;"</span>.format(ninja_turtle_0[<span class="string">'name'</span>])) <span class="comment">#Leonardo</span></div></pre></td></tr></table></figure></p><h3 id="3-2-2-添加键—值对"><a href="#3-2-2-添加键—值对" class="headerlink" title="3.2.2 添加键—值对"></a>3.2.2 添加键—值对</h3><p>  字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。下面为<code>ninja_turtle_0</code>添加两项信息：位置的X坐标和Y坐标。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ninja_turtle_0[<span class="string">'x_position'</span>] = 190</div><div class="line">ninja_turtle_0[<span class="string">'y_position'</span>] = 250</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #3: &#123;0&#125;"</span>.format(ninja_turtle_0))</div></pre></td></tr></table></figure></p><h3 id="3-2-3-先创建一个空字典"><a href="#3-2-3-先创建一个空字典" class="headerlink" title="3.2.3 先创建一个空字典"></a>3.2.3 先创建一个空字典</h3><p>  使用字典来存储用户提供的数据或在编写能自动生成大量键—值对的代码时，通常都需要先定义一个空字典：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">master_rat = &#123;&#125;</div><div class="line">master_rat[<span class="string">'name'</span>] = <span class="string">"Splinter"</span></div><div class="line">master_rat[<span class="string">'color'</span>] = <span class="string">"grey"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #4: &#123;0&#125;"</span>.format(master_rat))</div></pre></td></tr></table></figure></p><h3 id="3-2-4-修改字典中的值"><a href="#3-2-4-修改字典中的值" class="headerlink" title="3.2.4 修改字典中的值"></a>3.2.4 修改字典中的值</h3><p>  要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。例如，修改忍者神龟的位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ninja_turtle_0[<span class="string">'x_position'</span>] = 250</div><div class="line">ninja_turtle_0[<span class="string">'y_position'</span>] = 200</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #5: &#123;0&#125;, &#123;1&#125;"</span>.format(ninja_turtle_0[<span class="string">'x_position'</span>], ninja_turtle_0[<span class="string">'y_position'</span>]))</div></pre></td></tr></table></figure></p><h3 id="3-2-5-删除键—值对"><a href="#3-2-5-删除键—值对" class="headerlink" title="3.2.5 删除键—值对"></a>3.2.5 删除键—值对</h3><p>  对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。这里要注意的是，在使用del语句时，必须指定字典名和要删除的键：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">del ninja_turtle_0[<span class="string">'weapon'</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #6: &#123;0&#125;"</span>.format(ninja_turtle_0))</div></pre></td></tr></table></figure></p><h3 id="3-2-6-由类似对象组成的字典"><a href="#3-2-6-由类似对象组成的字典" class="headerlink" title="3.2.6 由类似对象组成的字典"></a>3.2.6 由类似对象组成的字典</h3><p>  字典存储的是一个对象（忍者神龟里的角色）的多种信息，但你也可以使用字典来存储众多对象的同一种信息。例如，假设你要调查很多人，询问他们最喜欢的编程语言，可使用一个字典来存储这种简单调查的结果，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">favorite_languages = &#123;</div><div class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</div><div class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</div><div class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</div><div class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</div><div class="line">    &#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #7: \nSarah's favorite language is "</span> + favorite_languages[<span class="string">'sarah'</span>].title() + <span class="string">"."</span>)</div></pre></td></tr></table></figure></p><h2 id="3-3-遍历字典"><a href="#3-3-遍历字典" class="headerlink" title="3.3 遍历字典"></a>3.3 遍历字典</h2><h3 id="3-3-1-遍历所有的键—值对"><a href="#3-3-1-遍历所有的键—值对" class="headerlink" title="3.3.1 遍历所有的键—值对"></a>3.3.1 遍历所有的键—值对</h3><p>  使用for循环遍历<code>favorite_languages</code>中的所有键—值对，并逐个打印出每人最喜欢什么编程语言：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #8: "</span>)</div><div class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> favorite_languages.items():</div><div class="line">    <span class="built_in">print</span>(key.title() + <span class="string">"'s favorite language is "</span> + value.title() + <span class="string">"."</span>)</div></pre></td></tr></table></figure></p><h3 id="3-3-2-遍历字典中的所有键"><a href="#3-3-2-遍历字典中的所有键" class="headerlink" title="3.3.2 遍历字典中的所有键"></a>3.3.2 遍历字典中的所有键</h3><p>  在不需要使用字典中的值时，可以利用keys()函数提取字典的键。下面来遍历<code>favorite_languages</code>，并将每个被调查者的名字都打印出来：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #9: "</span>)</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</div><div class="line">    <span class="built_in">print</span>(name.title())</div></pre></td></tr></table></figure></p><h3 id="3-3-3-按顺序遍历字典中的所有键"><a href="#3-3-3-按顺序遍历字典中的所有键" class="headerlink" title="3.3.3 按顺序遍历字典中的所有键"></a>3.3.3 按顺序遍历字典中的所有键</h3><p>  字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序。为此，可使用之前用过的sorted()函数来获得按特定顺序排列的键列表的副本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #10: "</span>)</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sorted(favorite_languages.keys()):</div><div class="line">    <span class="built_in">print</span>(<span class="string">"&#123;0&#125;, thank you for taking the poll."</span>.format(name.title()))</div></pre></td></tr></table></figure></p><h3 id="3-3-4-遍历字典中的所有值"><a href="#3-3-4-遍历字典中的所有值" class="headerlink" title="3.3.4 遍历字典中的所有值"></a>3.3.4 遍历字典中的所有值</h3><p>  如果你感兴趣的主要是字典包含的值，可使用values()函数，它返回一个值列表，而不包含任何键。例如，如果我们想获得一个列表只包含被调查者选择的各种语言，而不包含被调查者的名字，可以这样做：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #11: "</span>)</div><div class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</div><div class="line">    <span class="built_in">print</span>(language.title())</div></pre></td></tr></table></figure></p><p>  这里得到的结果会出现两个<code>Python</code>，如果不希望结果中出现重复的元素，可使用集合（set）。集合类似于列表，但每个元素都必须是独一无二的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #12: "</span>)</div><div class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</div><div class="line">    <span class="built_in">print</span>(language.title())</div></pre></td></tr></table></figure></p><h2 id="3-4-嵌套"><a href="#3-4-嵌套" class="headerlink" title="3.4 嵌套"></a>3.4 嵌套</h2><h3 id="3-4-1-字典列表"><a href="#3-4-1-字典列表" class="headerlink" title="3.4.1 字典列表"></a>3.4.1 字典列表</h3><p>  字典<code>ninja_turtle_0</code>中只存储了一个忍者神龟的信息，而需要存储其他忍者神龟的信息，则需要创建一个忍者神龟列表，其中每一个忍者神龟都是一个字典，包含各种相关信息，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ninja_turtle_0 = &#123;<span class="string">'name'</span>:<span class="string">'Leonardo'</span>, <span class="string">'color'</span>:<span class="string">'blue'</span>, <span class="string">'weapon'</span>:<span class="string">'katana'</span>&#125;</div><div class="line">ninja_turtle_1 = &#123;<span class="string">'name'</span>:<span class="string">'Raphael'</span>, <span class="string">'color'</span>:<span class="string">'red'</span>, <span class="string">'weapon'</span>:<span class="string">'sai'</span>&#125;</div><div class="line">ninja_turtle_2 = &#123;<span class="string">'name'</span>:<span class="string">'Michelangelo'</span>, <span class="string">'color'</span>:<span class="string">'orange'</span>, <span class="string">'weapon'</span>:<span class="string">'double-cut stick'</span>&#125;</div><div class="line">ninja_turtle_3 = &#123;<span class="string">'name'</span>:<span class="string">'Donatello'</span>, <span class="string">'color'</span>:<span class="string">'purple'</span>, <span class="string">'weapon'</span>:<span class="string">'bo'</span>&#125;</div><div class="line"></div><div class="line">ninja_turtles = [ninja_turtle_0, ninja_turtle_1, ninja_turtle_2, ninja_turtle_3]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #13: "</span>)</div><div class="line"><span class="keyword">for</span> ninja_turtle <span class="keyword">in</span> ninja_turtles:</div><div class="line">    <span class="built_in">print</span>(ninja_turtle)</div></pre></td></tr></table></figure></p><p>  完成忍者神龟字典列表的创建后，我们再用range()生成30个脚帮杂兵：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建一个空列表</span></div><div class="line">foot_ninjas = []</div><div class="line"></div><div class="line"><span class="comment">#创建30个脚帮杂兵</span></div><div class="line"><span class="keyword">for</span> foot_ninja_num <span class="keyword">in</span> range(30):</div><div class="line">    new_foot_ninja = &#123;<span class="string">'color'</span>: <span class="string">'black'</span>, <span class="string">'weapon'</span>:<span class="string">'sword'</span>&#125;</div><div class="line">    foot_ninjas.append(new_foot_ninja)</div><div class="line"></div><div class="line"><span class="comment">#显示前5个脚帮杂兵的详细信息，和总数</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #14: "</span>)</div><div class="line"><span class="keyword">for</span> foot_ninja <span class="keyword">in</span> foot_ninjas[:5]:</div><div class="line">    <span class="built_in">print</span>(foot_ninja)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Total number of foot ninjas: "</span> + str(len(foot_ninjas)))</div></pre></td></tr></table></figure></p><p>  这里我们还可以利用切片操作，将一部分脚帮杂兵的武器改为弓箭：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #15: "</span>)</div><div class="line"><span class="keyword">for</span> foot_ninja <span class="keyword">in</span> foot_ninjas[3:9]:</div><div class="line">    <span class="keyword">if</span> foot_ninja[<span class="string">'weapon'</span>] != <span class="string">'bow'</span>:</div><div class="line">        foot_ninja[<span class="string">'weapon'</span>] = <span class="string">'bow'</span></div><div class="line">    <span class="built_in">print</span>(foot_ninja)</div></pre></td></tr></table></figure></p><h3 id="3-4-2-在字典中存储列表"><a href="#3-4-2-在字典中存储列表" class="headerlink" title="3.4.2 在字典中存储列表"></a>3.4.2 在字典中存储列表</h3><p>  有时候，需要将列表存储在字典中，而不是将字典存储在列表中。例如，你如何描述顾客点的比萨呢？如果使用列表，只能存储要添加的比萨配料；但如果使用字典，就不仅可在其中包含配料列表，还可包含其他有关比萨的描述。在下面的示例中，存储了比萨的两方面信息：外皮类型和配料列表。其中的配料列表是一个与键<code>toppings</code>相关联的值:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pizza = &#123;</div><div class="line">    <span class="string">'crust'</span>: <span class="string">'thick'</span>,</div><div class="line">    <span class="string">'toppings'</span>: [<span class="string">'mushrooms'</span>, <span class="string">'extra cheese'</span>],</div><div class="line">    &#125;</div><div class="line"><span class="comment"># 概述所点的比萨</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #16: \nYou ordered a &#123;0&#125;-crust pizza with the following toppings:"</span>.format(pizza[<span class="string">'crust'</span>]))</div><div class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">'toppings'</span>]:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\t"</span> + topping)</div></pre></td></tr></table></figure></p><p>  每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。在本章前面有关喜欢的编程语言的示例中，如果将每个人的回答都存储在一个列表中，被调查者就可选择多种喜欢的语言:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">favorite_languages = &#123;</div><div class="line">    <span class="string">'jen'</span>: [<span class="string">'python'</span>, <span class="string">'ruby'</span>],</div><div class="line">    <span class="string">'sarah'</span>: [<span class="string">'c'</span>],</div><div class="line">    <span class="string">'edward'</span>: [<span class="string">'ruby'</span>, <span class="string">'go'</span>],</div><div class="line">    <span class="string">'phil'</span>: [<span class="string">'python'</span>, <span class="string">'haskell'</span>],</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #17: "</span>)</div><div class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\n&#123;0&#125;'s favorite languages are:"</span>.format(name.title()))</div><div class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"\t&#123;0&#125;"</span>.format(language.title()))</div></pre></td></tr></table></figure></p><h3 id="3-4-2-在字典中存储字典"><a href="#3-4-2-在字典中存储字典" class="headerlink" title="3.4.2 在字典中存储字典"></a>3.4.2 在字典中存储字典</h3><p>  可在字典中嵌套字典，但这样做时，代码可能很快复杂起来。例如，如果有多个网站用户，每个都有独特的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">users = &#123;</div><div class="line">    <span class="string">'aeinstein'</span>: &#123;</div><div class="line">        <span class="string">'first'</span>: <span class="string">'albert'</span>,</div><div class="line">        <span class="string">'last'</span>: <span class="string">'einstein'</span>,</div><div class="line">        <span class="string">'location'</span>: <span class="string">'princeton'</span>,</div><div class="line">        &#125;,</div><div class="line">    <span class="string">'mcurie'</span>: &#123;</div><div class="line">        <span class="string">'first'</span>: <span class="string">'marie'</span>,</div><div class="line">        <span class="string">'last'</span>: <span class="string">'curie'</span>,</div><div class="line">        <span class="string">'location'</span>: <span class="string">'paris'</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\nUsername: &#123;0&#125;"</span>.format(username))</div><div class="line">    full_name = user_info[<span class="string">'first'</span>] + <span class="string">" "</span> + user_info[<span class="string">'last'</span>]</div><div class="line">    location = user_info[<span class="string">'location'</span>]</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\tFull name: &#123;0&#125;"</span>.format(full_name.title()))</div><div class="line">    <span class="built_in">print</span>(<span class="string">"\tLocation: &#123;0&#125;"</span>.format(location.title()))</div></pre></td></tr></table></figure></p><p>  需要注意的是，这里表示每位用户的字典的结构都相同，这使得嵌套的字典处理起来更容易。倘若表示每位用户的字典都包含不同的键，for循环内部的代码将更复杂。</p><p>  本篇文章的代码可从<a href="https://github.com/gaiusyao/pivotlab/tree/master/learn_python" target="_blank" rel="external">我的GitHub</a>上获取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-1-字典-Dictionaries-简介&quot;&gt;&lt;a href=&quot;#3-1-字典-Dictionaries-简介&quot; class=&quot;headerlink&quot; title=&quot;3.1 字典(Dictionaries)简介&quot;&gt;&lt;/a&gt;3.1 字典(Dictionaries)
      
    
    </summary>
    
      <category term="代码之路" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="人生苦短，我用Python" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/"/>
    
      <category term="Python基础" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>02.列表和元组</title>
    <link href="http://yoursite.com/2017/10/28/lists-tuples/"/>
    <id>http://yoursite.com/2017/10/28/lists-tuples/</id>
    <published>2017-10-28T02:42:18.000Z</published>
    <updated>2017-10-28T13:17:48.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-1-序列-Sequence-简介"><a href="#2-1-序列-Sequence-简介" class="headerlink" title="2.1 序列(Sequence)简介"></a>2.1 序列(Sequence)简介</h2><p>  序列是Python中最基本的数据结构，一组有顺序的元素的集合。序列中的每个元素都分配一个数字指向它的位置，这个数字被称之为索引，第一个索引是0，第二个索引是1，依此类推。</p><h3 id="2-1-1-基本序列类型"><a href="#2-1-1-基本序列类型" class="headerlink" title="2.1.1 基本序列类型"></a>2.1.1 基本序列类型</h3><p>  Python有6个序列的内置类型，但最常见的是列表(lists)和元组(tuples)。其中，列表是由一系列按特定顺序排列的元素组成，用方括号<code>[]</code>来表示列表，并用逗号来分隔其中的元素。下面是一个简单的列表示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">band = [<span class="string">'Bon Jovi'</span>, <span class="string">'Guns &amp; Roses'</span>, <span class="string">'Radiohead'</span>, <span class="string">'Simple Plan'</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #1: &#123;0&#125;"</span>.format(band)) <span class="comment">#将列表打印出来，包括方括号</span></div></pre></td></tr></table></figure></p><p>  列表非常适合用于存储在程序运行期间可能变化的数据集，因为列表是可以修改的，但有的时候，也需要创建一系列不可修改的元素。Python将不能修改的值称为<strong>不可变的(immutable)</strong>，而不可变的序列被称为元组，下面是一个简单的元组实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dimensions = (200, 120)</div></pre></td></tr></table></figure></p><h3 id="2-1-2-通用序列操作"><a href="#2-1-2-通用序列操作" class="headerlink" title="2.1.2 通用序列操作"></a>2.1.2 通用序列操作</h3><p>  大多数序列类型（包括可变序列和不可变序列）都支持下面表个中的操作。</p><table><thead><tr><th>操作</th><th>结果</th></tr></thead><tbody><tr><td>x in s</td><td>如果s包含x，返回True，否则返回False</td></tr><tr><td>x not in s</td><td>如果s包含x，返回False，否则返回True</td></tr><tr><td>s + t</td><td>s和t的并置</td></tr><tr><td>s <em> n or n </em> s</td><td>相当于将s添加到自身n次</td></tr><tr><td>s[i]</td><td>s的第i项，从第0项开始</td></tr><tr><td>s[i:j]</td><td>s的从第i项到第j-1项</td></tr><tr><td>s[i:j:k]</td><td>s的从第i项到第j-1项,间隔为k</td></tr><tr><td>len(s)</td><td>s的长度</td></tr><tr><td>min(s)</td><td>s的最小项</td></tr><tr><td>max(s)</td><td>s的最大项目</td></tr><tr><td>s.index(x [， i [， j]])</td><td>在s中（在索引i之后或索引j之前）的x</td></tr><tr><td>s.count(x)</td><td>s中x的总出现次数</td></tr></tbody></table><h2 id="2-2-列表（Lists）元素"><a href="#2-2-列表（Lists）元素" class="headerlink" title="2.2 列表（Lists）元素"></a>2.2 列表（Lists）元素</h2><h3 id="2-2-1-访问列表元素"><a href="#2-2-1-访问列表元素" class="headerlink" title="2.2.1 访问列表元素"></a>2.2.1 访问列表元素</h3><p>  列表是<strong>有序集合</strong>，因此也可以通过索引访问列表的任何元素，具体形式为<code>list_name[index]</code>。当通过索引访问列表元素时，只返回访问的元素，而不包括方括号和引号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #2: &#123;0&#125;"</span>.format(band[0])) <span class="comment">#列表索引也是从0开始</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #3: &#123;0&#125;"</span>.format(band[-1])) <span class="comment">#同样可以使用负数索引</span></div></pre></td></tr></table></figure></p><p>  同样的，列表也可以进行切片操作，且切片操作会返回一个包含所请求元素的新列表，这意味着切片操作将会返回一个此列表的（浅）拷贝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #4: &#123;0&#125;"</span>.format(band[-3:]))</div></pre></td></tr></table></figure></p><h3 id="2-2-2-使用列表中的各个值"><a href="#2-2-2-使用列表中的各个值" class="headerlink" title="2.2.2 使用列表中的各个值"></a>2.2.2 使用列表中的各个值</h3><p>  可像使用其他变量一样使用列表中的各个值。如可以使用拼接根据列表中的值来创建消息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">message = <span class="string">"My favorite band is "</span> + band[0].title() + <span class="string">"!"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #5: &#123;0&#125;"</span>.format(message))</div></pre></td></tr></table></figure></p><p>  运行上面的代码，在<code>Output #4</code>后是message的值，即<code>My favorite band is Bon Jovi！</code></p><h3 id="2-2-3-添加列表元素"><a href="#2-2-3-添加列表元素" class="headerlink" title="2.2.3 添加列表元素"></a>2.2.3 添加列表元素</h3><p>  不同于字符串，创建的列表大多数是动态的，这意味着列表创建后，可以随着程序的运行增删改元素。<br>  Python提供了多种在既有列表中添加新数据的方式，最常用的是使用append()函数在列表末尾添加元素，或使用insert()函数将元素插入到指定位置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">band.append(<span class="string">'Zard'</span>) <span class="comment">#使用append(),将元素附加到列表末尾</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #6: &#123;0&#125;"</span>.format(band)) </div><div class="line">band.insert(1, <span class="string">'Sum 41'</span>) <span class="comment">#使用insert(),将元素插入到列表中第二个位置</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #7: &#123;0&#125;"</span>.format(band))</div></pre></td></tr></table></figure></p><h3 id="2-2-4-修改列表元素"><a href="#2-2-4-修改列表元素" class="headerlink" title="2.2.4 修改列表元素"></a>2.2.4 修改列表元素</h3><p>  修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。例如，将<code>band[1]</code>重新指定为<code>&#39;Sum 42&#39;</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">band[1] = <span class="string">"Sum 42"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #8: &#123;0&#125;"</span>.format(band[1]))</div></pre></td></tr></table></figure></p><h3 id="2-2-5-删除列表元素"><a href="#2-2-5-删除列表元素" class="headerlink" title="2.2.5 删除列表元素"></a>2.2.5 删除列表元素</h3><p>  经常需要删除列表中的一个或多个元素，可根据位置或值来删除列表中的元素，常见的方法有以下四种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#方法1：使用del语句删除指定位置的元素</span></div><div class="line">del band[1] </div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #9: &#123;0&#125;"</span>.format(band)) </div><div class="line"><span class="comment">#方法2：使用pop()删除列表末尾的元素，或者更形象的称之为弹出</span></div><div class="line">popped_band = band.pop()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #10 (band): &#123;0&#125;"</span>.format(band)) </div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #10 (popped_band): &#123;0&#125;"</span>.format(popped_band)) </div><div class="line"><span class="comment">#方法3：使用pop()来删除列表中指定位置的元素</span></div><div class="line">first_band = band.pop(0)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #11 (band): &#123;0&#125;"</span>.format(band)) </div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #11 (first_band): &#123;0&#125;"</span>.format(first_band)) </div><div class="line"><span class="comment">#方法4：使用remove()根据元素值删除元素</span></div><div class="line">band.remove(<span class="string">'Simple Plan'</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #12 (band): &#123;0&#125;"</span>.format(band))</div></pre></td></tr></table></figure></p><h3 id="2-2-6-对列表进行排序"><a href="#2-2-6-对列表进行排序" class="headerlink" title="2.2.6 对列表进行排序"></a>2.2.6 对列表进行排序</h3><p>  列表中的元素排列顺序通常是没有规律的，但又经常有以特定顺序呈现信息的需求，因此需要对列表进行排序。最简单的是通过sort()函数对列表进行排序。假设现在有一个汽车列表，并要让其中的汽车按字母顺序排列。为简化这项任务，我们假设该列表中的所有值都是小写的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</div><div class="line">cars.sort()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #13: &#123;0&#125;"</span>.format(cars))</div></pre></td></tr></table></figure></p><p>  sort()永久性地改变了列表元素的排列顺序。现在，汽车是按字母顺序排列的，且再也无法恢复到原来的排列顺序。若想保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用sorted()函数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #14 (sorted): &#123;0&#125;"</span>.format(sorted(cars)))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #14 (original): &#123;0&#125;"</span>.format(cars))</div></pre></td></tr></table></figure></p><p>  前面都是使用字母顺序排序，若想按与字母顺序相反的顺序显示列表，也可向sort()或sorted()传递参数<code>reverse=True</code>。</p><h3 id="2-2-7-反转列表"><a href="#2-2-7-反转列表" class="headerlink" title="2.2.7 反转列表"></a>2.2.7 反转列表</h3><p>  使用reverse()函数可轻松地反转列表，且可以很方便的恢复，只需要再次调用reverse()即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cars.reverse()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #15 (reversed): &#123;0&#125;"</span>.format(cars))</div><div class="line">cars.reverse()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #15 (original): &#123;0&#125;"</span>.format(cars))</div></pre></td></tr></table></figure></p><h3 id="2-2-8-确定列表长度"><a href="#2-2-8-确定列表长度" class="headerlink" title="2.2.8 确定列表长度"></a>2.2.8 确定列表长度</h3><p>  使用len()函数可快速获悉列表的长度。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #16: &#123;0&#125;"</span>.format(len(cars))) <span class="comment">#4</span></div></pre></td></tr></table></figure></p><h3 id="2-2-9-索引错误-IndexError"><a href="#2-2-9-索引错误-IndexError" class="headerlink" title="2.2.9 索引错误(IndexError)"></a>2.2.9 索引错误(IndexError)</h3><p>  使用列表经常易犯索引错误，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">    File <span class="string">"F:/pivotlab/learn_python/lists.py"</span>, line 57, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">        band[42]</div><div class="line">IndexError: list index out of range</div></pre></td></tr></table></figure></p><p>  索引错误意味着Python无法理解你指定的索引，这时可以尝试将你指定的索引减1，或者索引<code>-1</code>，以检查索引错误是因为多了一位，还是列表为空。</p><h2 id="2-3-操作列表"><a href="#2-3-操作列表" class="headerlink" title="2.3 操作列表"></a>2.3 操作列表</h2><h3 id="2-3-1-遍历整个列表"><a href="#2-3-1-遍历整个列表" class="headerlink" title="2.3.1 遍历整个列表"></a>2.3.1 遍历整个列表</h3><p>  现在假设我们有一个名单，需要将名单中的名字都打印出来。我们可以通过索引分别获取并打印名单中每个名字，但这样会有大量的重复，且每次名单发生变化，都需要修改代码。因此，我们需要使用for循环（将在控制流中深入讨论）去遍历整个列表，逐个打印名单中的名字：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ninja_turtles = [<span class="string">'Leonardo'</span>, <span class="string">'Raphael'</span>, <span class="string">'Michelangelo'</span>, <span class="string">'Donatello'</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #17: "</span>)</div><div class="line"><span class="keyword">for</span> ninja_turtle <span class="keyword">in</span> ninja_turtles:</div><div class="line">    <span class="built_in">print</span>(ninja_turtle)</div></pre></td></tr></table></figure></p><p>  在for循环中，可对每个元素执行任何操作。下面来扩展前面的示例，对于每位神龟，都打印一条消息，指出他是一个忍者了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ninja_turtles = [<span class="string">'Leonardo'</span>, <span class="string">'Raphael'</span>, <span class="string">'Michelangelo'</span>, <span class="string">'Donatello'</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #18: "</span>)</div><div class="line"><span class="keyword">for</span> ninja_turtle <span class="keyword">in</span> ninja_turtles:</div><div class="line">    <span class="built_in">print</span>(ninja_turtle.title() + <span class="string">", is a ninja!"</span>)</div></pre></td></tr></table></figure></p><h3 id="2-3-2-创建数值列表"><a href="#2-3-2-创建数值列表" class="headerlink" title="2.3.2 创建数值列表"></a>2.3.2 创建数值列表</h3><p>  前面的列表存储的均为字符串，但列表也经常用于存储一组数字，下面先用range()函数生成一些数字：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #19: "</span>) </div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(1,5):</div><div class="line">    <span class="built_in">print</span>(value)</div></pre></td></tr></table></figure></p><p>  可以看到，上述代码只打印了数字1~4，而没有包括5，需要打印1~5，则应写成<code>for value in range(1,6)</code>。<br>  接着，我们通过使用list()函数将range()的结果直接转换为列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#range()中第1、2个参数分别是起始值，第3个参数为步长，从2开始数，然后不断地加2，直到达到或超过终值（11）</span></div><div class="line">numbers = list(range(2,11,2)) </div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #20: &#123;0&#125;"</span>.format(numbers))</div></pre></td></tr></table></figure></p><p>  使用函数range()几乎能够创建任何需要的数字集，例如，如何创建一个列表，其中包含前10个整数（即1~10）的平方：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">squares = []</div><div class="line"><span class="keyword">for</span> square <span class="keyword">in</span> range(1,11):</div><div class="line">    squares.append(square**2)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #21: &#123;0&#125;"</span>.format(squares))</div></pre></td></tr></table></figure></p><p>  前面介绍的生成列表squares的方式包含三行代码，而<strong>列表解析</strong>让你只需编写一行代码就能生成这样的列表。如下列代码所示，列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">squares = [value**2 <span class="keyword">for</span> value <span class="keyword">in</span> range(1,11)]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #22: &#123;0&#125;"</span>.format(squares))</div></pre></td></tr></table></figure></p><p>  可以利用几个专门用于处理数字列表的Python函数，对列表进行简单的统计计算，例如，你可以轻松地找出数字列表的最大值、最小值和总和：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #23 (min): &#123;0&#125;"</span>.format(min(digits))) <span class="comment">#0</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #23 (max): &#123;0&#125;"</span>.format(max(digits))) <span class="comment">#9</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #23 (sum): &#123;0&#125;"</span>.format(sum(digits))) <span class="comment">#45</span></div></pre></td></tr></table></figure></p><h3 id="2-3-3-使用列表的一部分"><a href="#2-3-3-使用列表的一部分" class="headerlink" title="2.3.3 使用列表的一部分"></a>2.3.3 使用列表的一部分</h3><p>  在前面介绍访问列表元素的时候，已简单地提到了<strong>切片</strong>操作，通过切片，可以很方便地使用列表的一部分元素。下面使用切片进行的遍历列表元素和复制列表的示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"Here are the first three players on my team:"</span>)</div><div class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:3]: <span class="comment">#遍历切片</span></div><div class="line">    <span class="built_in">print</span>(player.title())</div><div class="line">other_players = players[3:] <span class="comment">#复制列表的剩余部分</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Here are the other players on my team:"</span>)</div><div class="line"><span class="keyword">for</span> player <span class="keyword">in</span> other_players [:]: <span class="comment">#遍历切片</span></div><div class="line">    <span class="built_in">print</span>(player.title())</div></pre></td></tr></table></figure></p><h2 id="2-4-元组-Tuples"><a href="#2-4-元组-Tuples" class="headerlink" title="2.4 元组(Tuples)"></a>2.4 元组(Tuples)</h2><h3 id="2-4-1-定义元组"><a href="#2-4-1-定义元组" class="headerlink" title="2.4.1 定义元组"></a>2.4.1 定义元组</h3><p>  元组看起来与列表非常相似，但使用的是圆括号<code>()</code>而非方括号<code>[]</code>来标识。定义元组后，就可以像访问列表元素一样使用索引来访问元组元素。下面的代码定义了一个名为<code>dimensions</code>的元组，存储了一个矩形的长度和宽度：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dimensions = (200, 120)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #24 (length): &#123;0&#125;"</span>.format(dimensions[0]))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #24 (width): &#123;0&#125;"</span>.format(dimensions[1]))</div></pre></td></tr></table></figure></p><p>  下面来尝试通过<code>dimensions[0] = 250</code>修改元组dimensions中的一个元素，结果将得到一个类型错误(TypeError)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypeError: <span class="string">'tuple'</span> object does not support item assignment</div></pre></td></tr></table></figure></p><h3 id="2-4-2-遍历元组"><a href="#2-4-2-遍历元组" class="headerlink" title="2.4.2 遍历元组"></a>2.4.2 遍历元组</h3><p>  像列表一样，也可以使用for循环来遍历元组中的所有值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Output #25: &#123;0&#125;"</span>.format(dimension))</div></pre></td></tr></table></figure></p><h3 id="2-4-3-修改元组变量"><a href="#2-4-3-修改元组变量" class="headerlink" title="2.4.3 修改元组变量"></a>2.4.3 修改元组变量</h3><p>  虽然不能修改元组的元素，但可以给存储元组的变量赋值。因此，如果要修改前述矩形的尺寸，可重新定义整个元组：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dimensions = (400, 100)</div><div class="line"><span class="built_in">print</span>(<span class="string">"\nModified dimensions:"</span>)</div><div class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</div><div class="line">    <span class="built_in">print</span>(dimension)</div></pre></td></tr></table></figure></p><p>  本篇文章的代码可从<a href="https://github.com/gaiusyao/pivotlab/tree/master/learn_python" target="_blank" rel="external">我的GitHub</a>上获取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2-1-序列-Sequence-简介&quot;&gt;&lt;a href=&quot;#2-1-序列-Sequence-简介&quot; class=&quot;headerlink&quot; title=&quot;2.1 序列(Sequence)简介&quot;&gt;&lt;/a&gt;2.1 序列(Sequence)简介&lt;/h2&gt;&lt;p&gt;  序列是P
      
    
    </summary>
    
      <category term="代码之路" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="人生苦短，我用Python" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/"/>
    
      <category term="Python基础" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>01.变量和简单数据类型</title>
    <link href="http://yoursite.com/2017/10/27/numbers-strings/"/>
    <id>http://yoursite.com/2017/10/27/numbers-strings/</id>
    <published>2017-10-26T16:00:00.000Z</published>
    <updated>2017-10-28T09:32:35.947Z</updated>
    
    <content type="html"><![CDATA[<p>  <strong>人生苦短，我用Python。</strong></p><p>  根据<a href="https://octoverse.github.com/" target="_blank" rel="external">GitHub2017开发者年度报告</a>，Python已成为了GitHub上第二受欢迎的语言（第一名是JavaScript）。这从一个侧面反映了Python正越来越被广泛地使用，也许是因为越来越多的开发者明白了“生命的可贵”？<br>  作为一名会点编程的产品狗，从大二开始接触Python，但除写爬虫以外，基本没用Python做什么正确的事情。目前对使用Python进行数据分析很感兴趣，计划先把Python基础再过一遍，然后尝试使用Python（或许会结合R）进行数据分析的工作。这里介绍一个IDE——<a href="https://www.anaconda.com/what-is-anaconda/" target="_blank" rel="external">Anaconda</a> ,它所提供的包管理和环境管理功能，可以省去不少麻烦，安装配置教程请戳<a href="http://www.jianshu.com/p/eecd77803508" target="_blank" rel="external">这儿</a>。安装好Python或Anaconda后，就让我们先从Python的变量和简单数据类型开始：</p><p><em>// 笔者使用的版本为Python3.6.3</em></p><h2 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h2><p>  按照惯例，先从<em>Hello World</em>开始，运行下面的代码，将会显示<code>Hello world</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Hello world"</span>)</div></pre></td></tr></table></figure></p><h3 id="1-1-1-变量和变量值"><a href="#1-1-1-变量和变量值" class="headerlink" title="1.1.1 变量和变量值"></a>1.1.1 变量和变量值</h3><p>  下面尝试使用变量来输出<code>Hello world</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hello_world = <span class="string">"Hello world"</span></div><div class="line"><span class="built_in">print</span>(hello_world)</div><div class="line">hello_world = <span class="string">"Hello Python world"</span></div><div class="line"><span class="built_in">print</span>(hello_world)</div></pre></td></tr></table></figure></p><p>  这里，我们首先添加了一个名为<code>hello_world</code>的变量，并给其赋值为<code>&quot;Hello world&quot;</code>，接着，又将变量<code>hello_world</code>的值修改为<code>&quot;Hello Python world&quot;</code>。执行这四行代码，将会先后打印<code>Hello world</code>和<code>Hello Python world</code>。因此，在程序中可随时修改变量的值，而Python将始终记录变量的最新值。</p><h3 id="1-1-2-变量的命名和使用"><a href="#1-1-2-变量的命名和使用" class="headerlink" title="1.1.2 变量的命名和使用"></a>1.1.2 变量的命名和使用</h3><p>  在Python中，变量的命名和使用需要遵循一定的规则，违反这些规则将带来不必要的错误，或使得代码变得难以阅读和理解。因此，请务必牢记并遵循以下规则：</p><ul><li>变量名只能包含字母、数值和下划线，且不能以数值打头；</li><li>变量名不能包含空格，但可使用下划线来分隔其中的单词；</li><li>不要将Python关键字和函数名用作变量名；</li><li>变量名应既简短又具有描述性，如<code>greeting_message</code>；</li><li>谨慎使用小写字母l和大写字母O，易被误认为是数值1和0;</li><li>变量名宜统一使用小写。</li></ul><p>  另外，请注意不要出现拼写错误（如hello_world拼成了hello_wolrd），因为解释器不会对代码进行拼写检查。一旦出现拼写错误，解释器将会返回一个名称错误（NameError）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NameError: name <span class="string">'hello_wolrd'</span> is not defined</div></pre></td></tr></table></figure></p><p><em>// 名称错误的出现通常是因为出现拼写错误，或未在使用变量前给其赋值。</em></p><h2 id="1-2-数值-Numbers"><a href="#1-2-数值-Numbers" class="headerlink" title="1.2 数值(Numbers)"></a>1.2 数值(Numbers)</h2><p>  Python支持4种数值类型：</p><ul><li>int（整型）：10            </li><li>long（长整型）：51924361L</li><li>float（浮点型）：0.0</li><li>complex（复数）：3.14j</li></ul><p>  其中，整型和浮点型应用的最为广泛，下面就重点介绍着两种数值类型。</p><h3 id="1-2-1-整型"><a href="#1-2-1-整型" class="headerlink" title="1.2.1 整型"></a>1.2.1 整型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = 42</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #1: &#123;0&#125;"</span>.format(x))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #2: &#123;0&#125;"</span>.format(3**4))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #3: &#123;0&#125;"</span>.format(int(8.1)/int(2.7)))</div></pre></td></tr></table></figure><p>  <code>Output #1</code>展示了如何将一个整数（数值42）赋给变量x，然后将变量x打印出来。<code>Output #5</code>说明了如何得到3的4次方并将结果打印出来。<code>Output #3</code>演示了将数值转换成整数并进行除法运算的方法。数值通过内置的<code>int</code>函数转换成整数，所以算式变成了8.1除以2.7，结果为3.0。</p><p><em>// format()为格式化函数</em></p><h3 id="1-2-2-浮点型"><a href="#1-2-2-浮点型" class="headerlink" title="1.2.2 浮点型"></a>1.2.2 浮点型</h3><p>  浮点型即带小数点的数，和整型一样，都是最常用的数值类型，示例如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #4: &#123;0:.3f&#125;"</span>.format(8.1/2.7))</div><div class="line">y = 2.5 * 4.8</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #5: &#123;0:.1f&#125;"</span>.format(y))</div><div class="line">r = 8 / <span class="built_in">float</span>(3)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #6: &#123;0:.2f&#125;"</span>.format(r))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #7: &#123;0:.4f&#125;"</span>.format(8.0/3))</div></pre></td></tr></table></figure></p><p>  <code>Output #4</code>和<code>Output #6</code>非常相似，除了将两个相除的数保留为浮点数，这样算式就是8.1除以2.7，等于3.000。这个示例中print语句的语法，<code>&quot;{0:.3f}&quot;.format(floating_point_number/floating_point_number)</code>，说明了如何设置print 语句中的小数位数。在这示例中，<code>.3f</code>设定了打印的输出值应该有3位小数。<code>Output #8</code>表示用2.5 乘以4.8，将结果赋给变量y，然后将结果打印出来，带有一位小数。这两个浮点数相乘的结果是12，所以打印出的值是12.0。<code>Output #6</code>和<code>Output #7</code>表示以两种方式计算8除以3，结果都是一个浮点数，大约等于2.667。</p><h3 id="1-2-3-常用数值操作"><a href="#1-2-3-常用数值操作" class="headerlink" title="1.2.3 常用数值操作"></a>1.2.3 常用数值操作</h3><table><thead><tr><th>操作</th><th>结果</th></tr></thead><tbody><tr><td>x + y</td><td>加法运算</td></tr><tr><td>x - y</td><td>减法运算</td></tr><tr><td>x * y</td><td>乘法运算</td></tr><tr><td>x / y</td><td>除法运算</td></tr><tr><td>x // y</td><td>x除以y的商向下取整的整数 </td></tr><tr><td>x % y</td><td>取余运算</td></tr><tr><td>-x</td><td>x取负</td></tr><tr><td>+x</td><td>x没有变化</td></tr><tr><td>abs(x)</td><td>x的绝对值</td></tr><tr><td>int(x)</td><td>将x转换为整型</td></tr><tr><td>float(x)</td><td>将x转换为浮点型</td></tr><tr><td>complex(re, im)</td><td>将参数转换为复数，re为复数的实部，im(默认0)为复数的虚部</td></tr><tr><td>c.conjugate()</td><td>复数c的共轭           </td></tr><tr><td>divmod(x, y)</td><td>(x // y， x % y)</td></tr><tr><td>pow(x, y)</td><td>x的y次幂</td></tr><tr><td>x ** y</td><td>x的y次幂</td></tr></tbody></table><h3 id="1-2-4-math模块"><a href="#1-2-4-math模块" class="headerlink" title="1.2.4 math模块"></a>1.2.4 math模块</h3><p>  <code>math</code>是一个十分有用的标准模块，可以满足一些常见的数值计算。需要使用math模块时，只需在脚本开头添加<code>from math import [function name]</code>，如<code>from math import exp, log, sqrt</code>添加了exp、log和sqrt三个函数，即可进行乘方、自然对数和平方根的计算。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">z = 6</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #8: &#123;0:.4f&#125;"</span>.format(exp(z)))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #9: &#123;0:.2f&#125;"</span>.format(<span class="built_in">log</span>(z)))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #10: &#123;0:.1f&#125;"</span>.format(sqrt(z)))</div></pre></td></tr></table></figure></p><p>  <code>Output #8</code>到<code>Output #10</code>分别输出z的乘方、自然对数和平方根，约为403.4288，1.79，2.4。<br>  关于数学模块和其他标准模块以及内置函数的更多信息，可以参考<a href="https://docs.python.org/3/library/index.html" target="_blank" rel="external">Python3标准库</a>。</p><h2 id="1-3-字符串-Strings"><a href="#1-3-字符串-Strings" class="headerlink" title="1.3 字符串(Strings)"></a>1.3 字符串(Strings)</h2><p>  字符串就是一系列字符组成的序列，是Python中的另一种基本数据类型。字符串由引号括起，其中的引号可以是单引号，也可以是双引号，甚至是3个单引号或3个双引号。下面是字符串的几个示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #11: &#123;0:s&#125;"</span>.format(<span class="string">'I\'</span>m enjoying learning Python.<span class="string">'))</span></div><div class="line"><span class="string">print("Output #12: &#123;0:s&#125;".format("This is a long string. Without the backslash\</span></div><div class="line"><span class="string">it would run off of the page on the right in the text editor and be very\</span></div><div class="line"><span class="string">difficult to read and edit. By using the backslash you can split the long\</span></div><div class="line"><span class="string">string into smaller strings on separate lines so that the whole string is easy\</span></div><div class="line"><span class="string">to view in the text editor."))</span></div><div class="line"><span class="string">print("Output #13: &#123;0:s&#125;".format('</span><span class="string">''</span>You can use triple single quotes</div><div class="line"><span class="keyword">for</span> multi-line comment strings.<span class="string">''</span><span class="string">'))</span></div><div class="line"><span class="string">print("Output #14: &#123;0:s&#125;".format("""You can also use triple double quotes</span></div><div class="line"><span class="string">for multi-line comment strings."""))</span></div></pre></td></tr></table></figure></p><p>  从上面的示例中，我们不难发现，由1个单引号或1个双引号括起的字符串为单行字符串，需要换行的时候，必须在行尾加上<code>\</code>。但这种办法不够稳妥，因为<code>\</code>必须是行尾最后一个字符，如果意外地按了一下空格键，<code>\</code>后面就会出现一个看不见的空格，从而出现语法错误，不能正常运行。而由3个单引号或3个双引号括起的，则为多行字符串，不需要行尾添加<code>\</code>，这个特性也被人用来创建多行注释（并不建议这样做）。下面是字符串的分片和索引，以及几个常用的字符串函数：</p><h3 id="1-3-1-切片和索引"><a href="#1-3-1-切片和索引" class="headerlink" title="1.3.1 切片和索引"></a>1.3.1 切片和索引</h3><p>  字符串可以用过string[X]来索引(X为一整数)。同时可以通过string[X:Y]（X、Y可以为正负整数或空）来进行切片操作，即从字符串总拿出一部分，储存在另一个地方。下面通过代码示例来简单说明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gaius_yao = <span class="string">"Product Manager"</span></div><div class="line">gaius_yao[0]    <span class="comment"># 'P'，字符串第一个字符</span></div><div class="line">gaius_yao[2]    <span class="comment"># 'o'，字符串第二个字符</span></div><div class="line">gaius_yao[-1]   <span class="comment"># 'r'，字符串最后一个字符</span></div><div class="line">gaius_yao[:7]   <span class="comment"># 'Product'，字符串前七个字符</span></div><div class="line">gaius_yao[-7:]  <span class="comment"># 'Manager'，字符串后七个字符</span></div></pre></td></tr></table></figure></p><h3 id="1-3-2-split"><a href="#1-3-2-split" class="headerlink" title="1.3.2 split()"></a>1.3.2 split()</h3><p>  split()函数将一个字符串拆分成一个子字符串列表，列表中的子字符串正好可以构成原字符串（列表为Python中的另一种数据类型，属于下一篇的内容）。split()函数可以在括号中使用两个附加参数，分别表示使用哪个字符进行拆分合进行拆分的次数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">string1 = <span class="string">"My deliverable is due in May"</span></div><div class="line">string1_list1 = string1.split()</div><div class="line">string1_list2 = string1.split(<span class="string">" "</span>,2)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #15: &#123;0&#125;"</span>.format(string1_list1))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #16: FIRST PIECE:&#123;0&#125; SECOND PIECE:&#123;1&#125; THIRD PIECE:&#123;2&#125;"</span>\</div><div class="line">.format(string1_list2[0], string1_list2[1], string1_list2[2]))</div><div class="line">string2 = <span class="string">"Your,deliverable,is,due,in,June"</span></div><div class="line">string2_list = string2.split(<span class="string">','</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #17: &#123;0&#125;"</span>.format(string2_list))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #18: &#123;0&#125; &#123;1&#125; &#123;2&#125;"</span>.format(string2_list[1], string2_list[5],\</div><div class="line">string2_list[-1]))</div></pre></td></tr></table></figure></p><p>  <code>Output #15</code>中，括号内无附加参数，因此<code>split()</code>函数按默认值（空格字符）进行拆分，又因为字符串中含有5个空格被拆分为6个子字符串。<code>Output #16</code>则包含了两个附加参数<code>&quot; &quot;</code>和<code>2</code>，即只想使用前两个空格进行拆分，生成含有三个子字符串的列表。<code>Output #17</code>和<code>Output #18</code>的附加参数为<code>,</code>，因此在出现逗号的位置拆分字符串。</p><h3 id="1-3-3-join"><a href="#1-3-3-join" class="headerlink" title="1.3.3 join()"></a>1.3.3 join()</h3><p>  join()函数与split()函数相反，将列表中的子字符串组合成一个字符串。使用时，将一个参数放在join()面前，表示使用这个字符（或字符串）在子字符串之间进行组合：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"Output #19: &#123;0&#125;"</span>.format(<span class="string">','</span>.join(string2_list)))</div></pre></td></tr></table></figure></p><p>  结果为<code>Your,deliverable,is,due,in,June</code>。</p><h3 id="1-3-4-strip"><a href="#1-3-4-strip" class="headerlink" title="1.3.4 strip()"></a>1.3.4 strip()</h3><p>  strip()函数可以从字符串的两侧去除空格、制表符和换行符，而想要仅从字符串地方左侧或右侧去除，则需要用到lstrip()或rstrip()函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">string3 = <span class="string">" Remove unwanted characters from this string.\t\t \n"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #20: string3: &#123;0:s&#125;"</span>.format(string3))</div><div class="line">string3_lstrip = string3.lstrip()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #21: lstrip: &#123;0:s&#125;"</span>.format(string3_lstrip))</div><div class="line">string3_rstrip = string3.rstrip()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #22: rstrip: &#123;0:s&#125;"</span>.format(string3_rstrip))</div><div class="line">string3_strip = string3.strip()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #23: strip: &#123;0:s&#125;"</span>.format(string3_strip))</div></pre></td></tr></table></figure></p><p>  strip()函数还可以设置附加参数，以从字符串两端删除其他字符，如<code>Output #25</code>将<code>string4</code>中的<code>&#39;$_-+&#39;</code>字符全部删去。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">string4 = <span class="string">"$<span class="variable">$Here</span>'s another string that has unwanted characters.__---++"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #24: &#123;0:s&#125;"</span>.format(string4))</div><div class="line">string4 = <span class="string">"$<span class="variable">$The</span> unwanted characters have been removed.__---++"</span></div><div class="line">string4_strip = string4.strip(<span class="string">'$_-+'</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #25: &#123;0:s&#125;"</span>.format(string4_strip))</div></pre></td></tr></table></figure></p><h3 id="1-3-5-replace"><a href="#1-3-5-replace" class="headerlink" title="1.3.5 replace()"></a>1.3.5 replace()</h3><p>  replace()函数将字符串中的一个或一组字符替换为另一个或另一组字符。这个函数在括号中使用两个附加参数，第一个参数是要在字符串中查找替换的字符或一组字符，第二个参数是要用来替换掉第一个参数的字符或一组字符：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">string5 = <span class="string">"Let's replace the spaces in this sentence with other characters."</span></div><div class="line">string5_replace = string5.replace(<span class="string">" "</span>, <span class="string">"!@!"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #26 (with !@!): &#123;0:s&#125;"</span>.format(string5_replace))</div><div class="line">string5_replace = string5.replace(<span class="string">" "</span>, <span class="string">","</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #27 (with commas): &#123;0:s&#125;"</span>.format(string5_replace))</div></pre></td></tr></table></figure></p><p>  <code>Output #32</code>展示了如何使用replace()函数将字符串中的空格替换为!@!，而<code>Output #33</code>则展示了如何使用逗号替换字符串中的空格。</p><h3 id="1-3-6-lower-、upper-和capitalize"><a href="#1-3-6-lower-、upper-和capitalize" class="headerlink" title="1.3.6 lower()、upper()和capitalize()"></a>1.3.6 lower()、upper()和capitalize()</h3><p>  lower()和upper()函数分别用来将字符串中的字母转换成小写或大写，而capitalize()函数则是将字符串中的第一个字母变为大写，其余变为小写。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">string6 = <span class="string">"Here's WHAT Happens WHEN You Use lower."</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #28: &#123;0:s&#125;"</span>.format(string6.lower()))</div><div class="line">string7 = <span class="string">"Here's what Happens when You Use UPPER."</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #29: &#123;0:s&#125;"</span>.format(string7.upper()))</div><div class="line">string5 = <span class="string">"here's WHAT Happens WHEN you use Capitalize."</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #30: &#123;0:s&#125;"</span>.format(string5.capitalize()))</div><div class="line">string5_list = string5.split()</div><div class="line"><span class="built_in">print</span>(<span class="string">"Output #31 (on each word):"</span>)</div><div class="line"><span class="keyword">for</span> word <span class="keyword">in</span> string5_list:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"&#123;0:s&#125;"</span>.format(word.capitalize()))</div></pre></td></tr></table></figure></p><p>  <code>Output #28</code>和<code>Output #29</code>通过lower()和upper()，将<code>string6</code>中的所有字母变为小写，<code>string7</code>中的所有字母变为大写。<code>Output #30</code>和<code>Output #31</code>则演示了capitalize()，其中`Output #31用到了<strong>for循环</strong>（在控制流中再详细讨论）将每一个子符串首字母大写。</p><h3 id="1-3-7-len"><a href="#1-3-7-len" class="headerlink" title="1.3.7 len()"></a>1.3.7 len()</h3><p>  通过len()函数可以得到字符串的长度，使用方法为<code>len(str)</code>，试运行下方的代码，将会得到终极答案<strong>42</strong>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">question = <span class="string">"the answer to life universe and everything"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"The answer is &#123;0&#125;"</span>.format(len(question)))</div></pre></td></tr></table></figure></p><p>  本篇文章的代码可从<a href="https://github.com/gaiusyao/pivotlab/tree/master/learn_python" target="_blank" rel="external">我的GitHub</a>上获取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &lt;strong&gt;人生苦短，我用Python。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  根据&lt;a href=&quot;https://octoverse.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub2017开发者年度报告&lt;/a&gt;
      
    
    </summary>
    
      <category term="代码之路" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="人生苦短，我用Python" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/"/>
    
      <category term="Python基础" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>GTD简介</title>
    <link href="http://yoursite.com/2017/10/21/gtd-intro/"/>
    <id>http://yoursite.com/2017/10/21/gtd-intro/</id>
    <published>2017-10-20T16:00:00.000Z</published>
    <updated>2017-10-21T08:34:02.759Z</updated>
    
    <content type="html"><![CDATA[<p>  GTD（<a href="http://gettingthingsdone.com/" target="_blank" rel="external">Getting Things Done</a>）是一套出色的时间管理系统，其核心理念是以下这段话：</p><blockquote><p>“把所有事情都从你的脑袋里弄出来。在事情出现就做好相关行动的一系列决定，而不是在事情爆发的时候。以合适的类别组织好你的项目的各种提醒以及下一步行动。保持你的系统更新和完整，及时进行回顾，使你在任何时候都能信任你的系统和对任务的处理。”</p></blockquote><p>  可以概括为：<strong>通过记录的方式将各种事情从脑海中移出，将其处理、组织后执行并及时复盘。</strong><br>  GTD说起来复杂，却也简单，只有五个核心步骤：收集、处理、组织、复盘、执行。</p><h2 id="（一）五步开始GTD"><a href="#（一）五步开始GTD" class="headerlink" title="（一）五步开始GTD"></a>（一）五步开始GTD</h2><h3 id="1-1-收集"><a href="#1-1-收集" class="headerlink" title="1.1 收集"></a>1.1 收集</h3><p>  把任何需要跟踪、记住、要做的事情全部从大脑中清理出来，放入“收集箱”中。这个“收集箱”可以是笔记本、录音设备、电子文档等可以记录的工具，但首先，每天花上十几分钟，把在你脑中所有的信息、任务、灵感，通通用记录的方式移出，以免内存溢出。在彻底将自己的大脑“清空”后，要对“收集箱”中的信息进行处理。</p><h3 id="1-2-处理"><a href="#1-2-处理" class="headerlink" title="1.2 处理"></a>1.2 处理</h3><p>  对“收集箱”中的信息进行处理，并承诺每周至少处理一次“收集箱”，保证“收集箱”里的信息不会堆积如山。<br>  处理工作要遵循下列原则：</p><ul><li>从第一条信息开始处理；</li><li>每次只处理一条信息；</li><li>将“收集箱”全部清空；</li><li>对于需要执行的项：<ul><li>如果少于两分钟，马上去做（两分钟法则）；</li><li>将重要、紧急的事优先处理，但记住，重要、不紧急的对于长期来说更关键；</li><li>交由他人完成；</li><li>列入计划内，或延期完成。</li></ul></li><li>否则：<ul><li>将其存档以方便查询；</li><li>为它定义合适的目标与情境，以便下一步执行；</li><li>打包送入垃圾桶。</li></ul></li></ul><h3 id="1-3-组织"><a href="#1-3-组织" class="headerlink" title="1.3 组织"></a>1.3 组织</h3><p>  将处理后的记录进行组织，分到下列四种集合中：</p><ul><li><strong>下一步行动（Next actions）：</strong>可以实际采取的下一步行动，其定义和情景应尽可能清晰；</li><li><strong>项目（Projects）：</strong>需要大于一个实际的行动才能达到目的的事就是一个“项目”，使用跟踪以及周期性的回顾来确保每个项目都有一个下一步的行动进行下去；</li><li><strong>等待完成（Waiting for）：</strong>指派给他人完成的事项，需要进行持续跟踪和定期检查；</li><li><strong>将来/可能（Someday/Maybe）：</strong>需要在某种条件、某个时间点下去完成，但不是现在。</li></ul><h3 id="1-4-复盘"><a href="#1-4-复盘" class="headerlink" title="1.4 复盘"></a>1.4 复盘</h3><p>  一般这一步会被译成回顾，但笔者更喜欢将其称为复盘，这是因为复盘是为了更好地总结这次的问题，以便之后不断加以改进。要做好复盘这步，需要达到以下三点：</p><ul><li>保持记录的习惯，记录每日、每周事项的完成情况，和未完成原因；</li><li>在每日、每周、每月结尾的时候对当日、当周、当月的完成情况进行回顾和总结；</li><li>根据实际情况持续调整改进系统，以使其更符合自身情况和不断发展着的变化。</li></ul><h3 id="1-5-执行"><a href="#1-5-执行" class="headerlink" title="1.5 执行"></a>1.5 执行</h3><p>  最后，也是最关键的，去执行吧！否则前面做的一切都是无用功。换句话说，前面的工作都是为了让你在执行的过程中，能更加简单、高效，不会在各种各样的事情中迷失方向。当然了，具体执行的时候，需要一些方法和技巧：</p><ul><li>集中注意力，拒绝干扰，包括微信、微博、蛤乎、邮件等一切能干扰你的东西；</li><li>对决定好的事情，坚决执行，绝不拖延；</li><li>采用番茄工作法（详见（三）番茄工作法）；</li><li>避免多任务，保持单进程，即是说一个时间段只专注于处理一件事，这一点很重要。</li></ul><blockquote><p>“因为我当时是看书还是谁跟我讲了一句很智慧的话，说你手里攥着千头万绪，工作是千头万绪，攥着一千个线头，但是一次针眼只能穿过一条线。”</p></blockquote><h2 id="（二）图解GTD流程"><a href="#（二）图解GTD流程" class="headerlink" title="（二）图解GTD流程"></a>（二）图解GTD流程</h2><p><img src="http://oxv2o8wp9.bkt.clouddn.com/GTD.png" alt="图解GTD流程"></p><h2 id="（三）番茄工作法"><a href="#（三）番茄工作法" class="headerlink" title="（三）番茄工作法"></a>（三）番茄工作法</h2><h3 id="3-1-GTD与番茄工作法"><a href="#3-1-GTD与番茄工作法" class="headerlink" title="3.1 GTD与番茄工作法"></a>3.1 GTD与番茄工作法</h3><p>  GTD作为一套时间管理系统，在具体执行上有一定的难度，如果没有一定自我控制能力和较好的时间管理方法，是很难在实践中运用好GTD的。因此，需要一套更易于实践的时间管理方法，以支持GTD在微观层面上的执行，比如<strong>番茄工作法</strong>。</p><h3 id="3-2-番茄工作法简介"><a href="#3-2-番茄工作法简介" class="headerlink" title="3.2 番茄工作法简介"></a>3.2 番茄工作法简介</h3><p>  番茄工作法（<a href="https://en.wikipedia.org/wiki/Pomodoro_Technique" target="_blank" rel="external">Pomodoro</a>）是一种简单易行的时间管理方法，由Francesco Cirillo创立。使用番茄工作法，必须要有一个番茄钟，可以选择在某宝上购买实体的，也可以用web或App上的，例如<a href="https://tomato-timer.com/" target="_blank" rel="external">tomato-timer</a>，一般一个番茄钟的时间为25分钟（也可以更长）。<br>  另外，番茄不仅能用在工作/学习中，也可以用在休闲娱乐的时候，例如玩游戏或者看剧的时候，每隔25分钟就休息一下。  </p><h3 id="3-3-番茄工作法的步骤"><a href="#3-3-番茄工作法的步骤" class="headerlink" title="3.3 番茄工作法的步骤"></a>3.3 番茄工作法的步骤</h3><h4 id="3-3-1-制作任务清单"><a href="#3-3-1-制作任务清单" class="headerlink" title="3.3.1 制作任务清单"></a>3.3.1 制作任务清单</h4><p>  番茄工作法首先要制订当日的任务清单（也就是当日Todo List），将当天要完成的事情列下来，并分解为若干个番茄。其中，超过4个番茄的任务要分解（个人习惯，可设为超过7个），不足1个的和其他零碎任务组合，直到变为一个完整的番茄。</p><h4 id="3-3-2-专注于任务"><a href="#3-3-2-专注于任务" class="headerlink" title="3.3.2 专注于任务"></a>3.3.2 专注于任务</h4><p>  从任务清单上选择一个待完成的任务，然后开始你的任务，中途不允许被任何与该任务无关的事所打扰，直到番茄时钟响起，然后可以获得一个5分钟的短休息，在四个番茄种后可以获得一个15分钟的长休息奖励。过程中的任何事务性干扰应被记录下来，待番茄钟结束后再去解决。<br><em>// 如受某些不可抗力影响，番茄钟被打断，则需重新开始</em></p><h4 id="3-3-3-填写任务清单"><a href="#3-3-3-填写任务清单" class="headerlink" title="3.3.3 填写任务清单"></a>3.3.3 填写任务清单</h4><p>  在番茄钟结束后，要在完成的任务后打勾，并记录下完成情况。</p><h4 id="3-3-4-放轻松"><a href="#3-3-4-放轻松" class="headerlink" title="3.3.4 放轻松"></a>3.3.4 放轻松</h4><p>  在番茄钟间隔的短休息和长休息中，要好好地放轻松，可以浏览网页、回复信息，总之就是好好调整状态。</p><h4 id="3-3-5-下一个流程"><a href="#3-3-5-下一个流程" class="headerlink" title="3.3.5 下一个流程"></a>3.3.5 下一个流程</h4><p>  结束休息后，应立即、马上地转换状态，投入到下一个流程中。</p><h2 id="（四）结语"><a href="#（四）结语" class="headerlink" title="（四）结语"></a>（四）结语</h2><p>  GTD是一套行之有效且需持续实践的系统，需要结合自身情况和不断变化着的实际，对GTD进行不断的迭代，使其成为一个更加可靠、可信赖的系统。在这个过程中，工具的角色虽不是决定性的，但也十分重要。因此笔者拟在完成个人博客的第二期建设后，集中精力开发一款GTD工具（结合番茄工作法），这篇博文就作为该项目的一个开端吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  GTD（&lt;a href=&quot;http://gettingthingsdone.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Things Done&lt;/a&gt;）是一套出色的时间管理系统，其核心理念是以下这段话：&lt;/p&gt;
&lt;block
      
    
    </summary>
    
      <category term="项目介绍" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="Gaius Things Done" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/Gaius-Things-Done/"/>
    
      <category term="GTD笔记" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/Gaius-Things-Done/GTD%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="D&amp;B" scheme="http://yoursite.com/tags/D-B/"/>
    
      <category term="GTD" scheme="http://yoursite.com/tags/GTD/"/>
    
  </entry>
  
  <entry>
    <title>个人博客的迭代历程</title>
    <link href="http://yoursite.com/2017/10/20/gaius-blog-history/"/>
    <id>http://yoursite.com/2017/10/20/gaius-blog-history/</id>
    <published>2017-10-19T16:00:00.000Z</published>
    <updated>2017-10-21T08:34:28.709Z</updated>
    
    <content type="html"><![CDATA[<p>  在2017年10月15日，我的<a href="https://gaiusyao.github.io" target="_blank" rel="external">个人博客</a>的第0版本（代号Marius）正式上线了。使用Hexo + Github Pages搭建，基本遵循<a href="https://material.io/guidelines/material-design/introduction.html" target="_blank" rel="external">Material Design</a> ，具体方法可参看我的<a href="https://gaiusyao.github.io/2017/10/15/article_0001/" target="_blank" rel="external">上一篇博文</a>，但这并不是我的第一个个人博客，也不是个人博客的最后一次迭代，下面就简单说说个人博客的迭代历程和立个flag。</p><h2 id="（一）历史的行程"><a href="#（一）历史的行程" class="headerlink" title="（一）历史的行程"></a>（一）历史的行程</h2><h3 id="1-1-简书阶段"><a href="#1-1-简书阶段" class="headerlink" title="1.1 简书阶段"></a>1.1 简书阶段</h3><p>  在此之前，曾在<a href="http://www.jianshu.com/u/f9bdc00c5771" target="_blank" rel="external">简书</a>上短暂地发布过几篇博客，因为当时自己的思想还很幼稚（Naïve），加上想要搭建自己的个人博客，因此没有持续更新。在简书发布并保留到现在的博文有：</p><ol><li><a href="http://www.jianshu.com/p/5fef17a4a198" target="_blank" rel="external">产品汪的工具箱</a></li><li><a href="http://www.jianshu.com/p/87d9f8a1f3fd" target="_blank" rel="external">产品为什么要懂技术</a></li><li><a href="http://www.jianshu.com/p/62f742c7f708" target="_blank" rel="external">敏捷软件开发宣言</a></li><li><a href="http://www.jianshu.com/p/d24e23e99d22" target="_blank" rel="external">产品汪与时间管理</a></li></ol><p>  现在回头看去，在简书上的博文都很不成熟，也未能持续更新。但它还是给我带来了一点人生的经验：</p><ul><li>第一次写博客，锻炼了自己的<strong>Writing</strong>能力；</li><li>为了做好自己的博客，大量浏览了国内外的优秀博客，增长了<strong>Reading</strong>经验；</li><li>使自己下定决心搭建个人博客，从此开始了个人博客的<strong>Coding</strong>之路。</li></ul><h3 id="1-2-探索阶段"><a href="#1-2-探索阶段" class="headerlink" title="1.2 探索阶段"></a>1.2 探索阶段</h3><p>  在决定不继续更新简书，转而开始搭建个人博客之后，是经过了一段时间的探索，才选择了使用Hexo + Github Pages搭建个人博客的。<br>在这个过程中，尝试过使用<a href="http://www.mkdocs.org/" target="_blank" rel="external">MkDocs</a> 、<a href="https://ghost.org/" target="_blank" rel="external">Ghost</a> 来搭建个人博客，也曾短暂地试用过<a href="https://jekyllrb.com/" target="_blank" rel="external">Jeklly</a> ，但都不够理想。最后，选择了拥抱Hexo。<br><em>// 之前的版本，现在仅存放在本人码云的私有项目中。</em></p><h3 id="1-3-Marius阶段"><a href="#1-3-Marius阶段" class="headerlink" title="1.3 Marius阶段"></a>1.3 Marius阶段</h3><p>  Marius是个人博客版本0的代号，取自古罗马的著名政治家盖乌斯·马略（Gaius Marius）。而后续的大版本迭代将以十二恺撒（the twelve caesars）命名，小版本迭代也将以古罗马名人命名。<br><em>// 没错，Gaius一名来自盖乌斯·尤里乌斯·恺撒（Gaius Julius Caesar）。</em></p><p>  本阶段主要做了三件事：</p><ul><li>选用了Hexo + Github Pages搭建个人博客；</li><li>拟定了未来三个月阅读和写作计划；</li><li>做了一些产品原型和前端技术的相关练习。</li></ul><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><p>  搭建个人博客的过程，其实也是一次产品迭代的过程。从一开始的简书，到后来的曲折探索，再到Marius版本的发布，每个阶段的变化都很大，甚至可以说，每个阶段的产出都是截然不同的。但关键在于，这三个阶段都始终紧紧围绕着解决<strong>建设个人博客</strong>这一个问题来展开，每个阶段所选用的解决方案都是最符合当时实际情况的，并且每个阶段都比上个阶段更进一步，为建设个人博客问题提供了<strong>更可靠、更高效、更惊艳</strong>的解决方式，也就是本人追求的——<strong>在持续寻找问题的更优解过程中，让正确的事情相继发生</strong>。这样说略显抽象，下面举个造汽车的例子来说明：</p><p><img src="http://blog.crisp.se/wp-content/uploads/2016/01/mvp.png" alt="mvp"></p><ol><li>需要一辆小汽车，解决从A点移动到B点的问题，并满足需求方对汽车的其他需求（如舒适性、安全性）；</li><li>有两种造车方法，一种是传统的从轮子到底盘再到车身一部分一部分地制造，另一种是先造一个滑板再到滑轮、自行车、摩托车最后才是小汽车；</li><li>第一种方法只有到最后造出车了，才能验证它是否能解决问题、满足需求，一旦最后不能完全满足需求（可能性很高），将带来较差的体验和巨大的成本；</li><li>后一种方法可以持续验证的基础上不断迭代，在满足基本需求(从A点移动到B点)的前提下，每个阶段逐步优化产品、提升体验；</li><li>而后一种，其实就是前面所提到的持续寻找问题的更优解，它在解决问题的基础上，持续为问题的解决提供更优解。</li></ol><p>  这其实也是本人所理解的MVP（最小可行化产品），可能还有些偏差，可以点击查看[这篇文章]了解更多关于MVP的思想(<a href="http://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp)。" target="_blank" rel="external">http://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp)。</a></p><h2 id="（二）立Flag"><a href="#（二）立Flag" class="headerlink" title="（二）立Flag"></a>（二）立Flag</h2><p>  未来两个多月（2017/10-2017/12）主要有两个任务，制作个人Hexo主题和丰富博客内容（至少5~6篇博文）。<br>  立一个Flag，本博文将持续更新，用于个人博客未来各阶段的回顾和反思。</p><p><em>未完待续······</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  在2017年10月15日，我的&lt;a href=&quot;https://gaiusyao.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人博客&lt;/a&gt;的第0版本（代号Marius）正式上线了。使用Hexo + Github Pages搭建
      
    
    </summary>
    
      <category term="项目介绍" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="Gaius Blog" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/Gaius-Blog/"/>
    
    
      <category term="D&amp;B" scheme="http://yoursite.com/tags/D-B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages搭建个人博客</title>
    <link href="http://yoursite.com/2017/10/15/hexo-githubpages/"/>
    <id>http://yoursite.com/2017/10/15/hexo-githubpages/</id>
    <published>2017-10-14T16:00:00.000Z</published>
    <updated>2017-10-27T08:39:28.317Z</updated>
    
    <content type="html"><![CDATA[<p>  今天刚建好博客，还没什么内容可以放上来，就先从如何搭建个人博客（毕竟在这走了不少弯路）开始，写一篇微小的教程吧！<br>首先，笔者的个人博客是使用Hexo + GitHub Pages搭建的。至于为什么要使用Hexo来搭建个人博客，而不是GitHub Pages钦定的jeklly，这和笔者被jeklly坑过完全没关系，主要是Hexo足够快速、简洁和高效。不过这里不展开介绍了，详细介绍可以看<a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a>，英语不好的同学点<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">这里</a>。接着，我们先从<strong>Hexo的安装与常用命令</strong>开始，介绍如何使用Hexo + GitHub Pages搭建个人博客。</p><p><em>// 笔者系统环境为win10</em></p><h2 id="（一）Hexo的安装与常用命令"><a href="#（一）Hexo的安装与常用命令" class="headerlink" title="（一）Hexo的安装与常用命令"></a>（一）Hexo的安装与常用命令</h2><h3 id="1-1-安装前的准备"><a href="#1-1-安装前的准备" class="headerlink" title="1.1 安装前的准备"></a>1.1 安装前的准备</h3><p>  在安装Hexo前，需要先安装Noed.js以及Git，如果还未接触过两者，可参考下面的链接。</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="external">下载Node.js</a></li><li><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">Node.js的安装和配置</a></li><li><a href="https://git-scm.com/download/" target="_blank" rel="external">下载Git</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="external">安装Git</a></li></ul><h3 id="1-2-安装Hexo"><a href="#1-2-安装Hexo" class="headerlink" title="1.2 安装Hexo"></a>1.2 安装Hexo</h3><p>  完成Noed.js和Git的安装后，先别急，花几分钟看看如何使用<a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="external">NPM</a>，然后在命令行中按下面的代码进行操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ md hexo/blog <span class="comment"># 创建hexo文件夹，win用户为\</span></div><div class="line">$ <span class="built_in">cd</span> hexo <span class="comment"># 进入hexo文件夹</span></div><div class="line">$ npm install hexo-cli -g <span class="comment"># 使用 npm 安装 Hexo</span></div><div class="line">$ hexo init blog </div><div class="line">$ <span class="built_in">cd</span> blog </div><div class="line">$ npm install</div><div class="line">$ hexo g <span class="comment"># == hexo generate，生成静态网站</span></div><div class="line">$ hexo s <span class="comment"># == hexo server，启动服务器</span></div></pre></td></tr></table></figure><p>  完成上述操作后，打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>访问结果。</p><h3 id="1-3-Hexo常用命令"><a href="#1-3-Hexo常用命令" class="headerlink" title="1.3 Hexo常用命令"></a>1.3 Hexo常用命令</h3><blockquote><ol><li>hexo g(hexo generate) 生成静态文件</li><li>hexo s(hexo server) 启动本地web服务，用于预览</li><li>hexo d(hexo deploy) 部署到远端（如github）</li><li>hexo n(hexo new) 新建页面或文章</li><li>hexo v(hexo version) 查看版本信息</li><li>hexo help <command> 查看命令帮助</li><li>hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)</li><li>hexo list <type> 列出网站资料</type></li></ol></blockquote><h2 id="（二）GitHub-Pages"><a href="#（二）GitHub-Pages" class="headerlink" title="（二）GitHub Pages"></a>（二）GitHub Pages</h2><h3 id="2-1-Github-Pages介绍"><a href="#2-1-Github-Pages介绍" class="headerlink" title="2.1 Github Pages介绍"></a>2.1 Github Pages介绍</h3><p>  GitHub Pages是全球最大同性交友网站<a href="https://github.io" target="_blank" rel="external">GitHub</a>免费提供给开发者的一款介绍托管项目的产品，多用于建设个人主页或项目介绍，因为本文侧重讲如何用Hexo + GitHub Pages搭建个人博客，这里就不做太多展开了，想要了解GitHub Pages的同学可以看下面两个链接：</p><ul><li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages主页</a></li><li><a href="http://www.jianshu.com/p/c5d5cb61d4e9" target="_blank" rel="external">给懒癌患者看的GitHub Pages手册</a></li></ul><h3 id="2-2-部署Hexo到Github-Pages"><a href="#2-2-部署Hexo到Github-Pages" class="headerlink" title="2.2 部署Hexo到Github Pages"></a>2.2 部署Hexo到Github Pages</h3><p>  最激动人心的一步来了，将Hexo部署到Github Pages后，就可以在你的github.io上看到Hexo搭建的个人博客。不过，首先让我们明确要做什么，基本上部署到Github Pages就是两步：<code>hexo g</code> 生成静态网站和<code>git commit</code>提交代码，但具体操作需要使用hexo deploy或git命令行。</p><h3 id="2-3-使用hexo-deploy部署"><a href="#2-3-使用hexo-deploy部署" class="headerlink" title="2.3 使用hexo deploy部署"></a>2.3 使用hexo deploy部署</h3><p>  使用hexo deploy部署，首先要安装一个拓展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-deployer-git</div></pre></td></tr></table></figure><p>  接着要在配置文件<code>blog\_config.yml</code>的<code># Deployment</code>下做如下修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:jiji262/jiji262.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure><p>  然后在命令行中执行如下代码，即可完成部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d <span class="comment"># 等同于hexo deploy</span></div></pre></td></tr></table></figure><p><em>// 关于使用hexo deploy部署，可参考<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">这个链接</a></em></p><h3 id="2-4-使用git命令行部署"><a href="#2-4-使用git命令行部署" class="headerlink" title="2.4 使用git命令行部署"></a>2.4 使用git命令行部署</h3><p>  使用git命令行进行部署也很简单，只需要先在<code>blog</code>下创建一个<code>.deploy</code>文件夹，再将创建的<code>repo</code>克隆(clone)到本地，然后按如下代码部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> d:/hexo/blog</div><div class="line">$ git <span class="built_in">clone</span> git@github.com:gaiusyao/gaiusyao.github.io.git .deploy/jiji262.github.io</div><div class="line">$ hexo g <span class="comment"># 等同于hexo generate</span></div><div class="line">$ cp -R public/* .deploy/gaiusyao.github.io <span class="comment">#拷贝blog/public文件夹内容到git目录下</span></div><div class="line">$ <span class="built_in">cd</span> .deploy/jiji262.github.io</div><div class="line">$ git add .</div><div class="line">$ git commit -m “update blog”</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure><h2 id="（三）Hexo主题"><a href="#（三）Hexo主题" class="headerlink" title="（三）Hexo主题"></a>（三）Hexo主题</h2><h3 id="3-1-使用Hexo主题"><a href="#3-1-使用Hexo主题" class="headerlink" title="3.1 使用Hexo主题"></a>3.1 使用Hexo主题</h3><p>  使用Hexo非常简单，首先在Hexo官网的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题页面</a>挑选适合的主题，这里推荐笔者朋友的<a href="https://github.com/GeekaholicLin/hexo-theme-ylion" target="_blank" rel="external">yolin</a>主题，然后在blog下使用命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/GeekaholicLin/hexo-theme-ylion.git themes/yolin</div></pre></td></tr></table></figure><p>  修改<code>blog</code>目录下的<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>yolin</code>，即可使用新的Hexo主题。</p><h3 id="3-2-Hexo主题配置"><a href="#3-2-Hexo主题配置" class="headerlink" title="3.2 Hexo主题配置"></a>3.2 Hexo主题配置</h3><p>  Hexo主题的配置和你所采用的主题有关，不同的主题需要不同的配置，主题的配置文件是<code>blog\themes</code>文件夹下的<code>_config.yml</code>。下面，以笔者使用的<code>raytaylorism</code>为例，介绍Hexo主题的配置项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">menu: <span class="comment"># 菜单配置（若不需要某项可直接删除）</span></div><div class="line">    - id: home</div><div class="line">        link: /</div><div class="line">        icon: home</div><div class="line">        class: menu-home</div><div class="line">    - id: archives</div><div class="line">        link: /archives</div><div class="line">        icon: archive</div><div class="line">        class: menu-archive</div><div class="line">    - id: category</div><div class="line">        link: javascript:;</div><div class="line">        category: <span class="literal">true</span></div><div class="line">        icon: bookmark</div><div class="line">        class: menu-category</div><div class="line">    - id: reading</div><div class="line">        link: /reading</div><div class="line">        icon: book</div><div class="line">        class: menu-reading</div><div class="line">    - id: about</div><div class="line">        link: /about</div><div class="line">        icon: user</div><div class="line">        class: menu-about</div><div class="line"></div><div class="line">color: <span class="comment"># 颜色配置</span></div><div class="line">  header: blue</div><div class="line">  footer: blue</div><div class="line">  page_nav: blue</div><div class="line">  side_nav: blue darken-1</div><div class="line">  tag: deep-orange lighten-1</div><div class="line">  article_title_link: blue</div><div class="line">  link: deep-orange</div><div class="line">  pagination: deep-orange</div><div class="line">  tab: deep-orange</div><div class="line">  archive_item: grey</div><div class="line">  fab: deep-orange</div><div class="line">  fab_2: cyan</div><div class="line">  fab_3: orange darken-1</div><div class="line">  new: deep-orange</div><div class="line">  about_header: blue</div><div class="line">  about_title: blue</div><div class="line"></div><div class="line">archive_yearly: <span class="literal">true</span></div><div class="line"></div><div class="line">copyright: © 2017 Gaius-Yao, All rights reserved. <span class="comment"># 版权信息</span></div><div class="line"></div><div class="line">disqus_shortname: <span class="comment"># Disqus评论shortname，若为空则不启用</span></div><div class="line">duoshuo_shortname: <span class="comment"># 多说shortname，若为空则不启用</span></div><div class="line">yungentie_product_key: <span class="comment"># 网易云跟帖productKey，从通用代码中获取，若为空则不启用</span></div><div class="line">google_analytics: <span class="comment"># Google分析track id，若为空则不启用</span></div><div class="line">tencent_analytics: 63863615 <span class="comment"># 腾讯分析sId，若为空则不启用</span></div><div class="line">google_code_prettify: prettify-tomorrow-night-eighties <span class="comment"># 高亮的主题，若为空则使用默认主题</span></div><div class="line"></div><div class="line">mathjax: <span class="literal">true</span> <span class="comment"># 是否启用MathJax数学公式渲染。如果你确认整个站点的博文都不会用到Latex数学公式，可以将其该项设为false提高页面加载速度</span></div><div class="line">page_stat: <span class="literal">true</span> <span class="comment"># 是否启用网页计数器</span></div></pre></td></tr></table></figure><h3 id="3-3-创建Hexo主题"><a href="#3-3-创建Hexo主题" class="headerlink" title="3.3 创建Hexo主题"></a>3.3 创建Hexo主题</h3><p>  详见下篇Hexo教程——<a href="#">制作Hexo主题</a>。</p><h2 id="（四）写博客"><a href="#（四）写博客" class="headerlink" title="（四）写博客"></a>（四）写博客</h2><h3 id="4-1-创建新文章"><a href="#4-1-创建新文章" class="headerlink" title="4.1 创建新文章"></a>4.1 创建新文章</h3><p>  Hexo写博客极其简单，可以执行下列命令来创建一篇新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure><h3 id="4-2-布局-Layout-和标题-tilte"><a href="#4-2-布局-Layout-和标题-tilte" class="headerlink" title="4.2 布局(Layout)和标题(tilte)"></a>4.2 布局(Layout)和标题(tilte)</h3><p>  Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径：</p><blockquote><ul><li>post:  source/_posts</li><li>page:  source</li><li>draft: source/_drafts</li></ul></blockquote><p>  而自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><p><em>// Hexo 默认以标题做为文件名称，但也可以在<code>_config.yml</code>编辑’new_post_name’修改默认文件名称。</em></p><h3 id="4-3-写作和草稿"><a href="#4-3-写作和草稿" class="headerlink" title="4.3 写作和草稿"></a>4.3 写作和草稿</h3><p>  Hexo写作采用<a href="http://www.jianshu.com/p/075d7cac8fef" target="_blank" rel="external">markdown语法</a>，完成后使用<code>hexo g</code>即可生成静态html页面。</p><p>  而使用上一部分提到的<code>draft</code>布局创建的草稿，在建立时会被保存到<code>source/_drafts</code>文件夹，可以通过<code>publish</code>命令将其移到<code>source/_posts</code>文件夹内发布：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure><h3 id="4-4-模板-Scaffold"><a href="#4-4-模板-Scaffold" class="headerlink" title="4.4 模板(Scaffold)"></a>4.4 模板(Scaffold)</h3><p>  在新建文章时，Hexo会根据<code>scaffolds</code>文件夹内相对应的文件（即模板）来建立文件，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new photo <span class="string">"My Gallery"</span></div></pre></td></tr></table></figure><p>  在执行这行指令时，Hexo 会尝试在<code>scaffolds</code>文件夹中寻找<code>photo.md</code>，并根据其内容建立文章，以下是可以在模版中使用的变量：</p><blockquote><ul><li>layout: 布局</li><li>title:  标题</li><li>date:   文件建立日期</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  今天刚建好博客，还没什么内容可以放上来，就先从如何搭建个人博客（毕竟在这走了不少弯路）开始，写一篇微小的教程吧！&lt;br&gt;首先，笔者的个人博客是使用Hexo + GitHub Pages搭建的。至于为什么要使用Hexo来搭建个人博客，而不是GitHub Pages钦定的j
      
    
    </summary>
    
      <category term="代码之路" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="微小的教程" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E5%BE%AE%E5%B0%8F%E7%9A%84%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E4%B9%8B%E8%B7%AF/%E5%BE%AE%E5%B0%8F%E7%9A%84%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
