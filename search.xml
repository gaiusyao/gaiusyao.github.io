<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[个人博客的迭代历程]]></title>
      <url>/2017/10/20/article_0002/</url>
      <content type="html"><![CDATA[<p>在2017年10月15日，我的<a href="gaiusyao.github.io">个人博客</a>的第0版本（代号Marius）正式上线了。使用Hexo + Github Pages搭建，基本遵循<a href="https://material.io/guidelines/material-design/introduction.html" target="_blank" rel="external">Material Design</a> ，具体方法可参看我的<a href="https://gaiusyao.github.io/2017/10/15/article_0001/" target="_blank" rel="external">上一篇博文</a>，但这并不是我的第一个个人博客，也不是个人博客的最后一次迭代，下面就简单说说个人博客的迭代历程和立个flag。</p>
<h2 id="（一）历史的行程"><a href="#（一）历史的行程" class="headerlink" title="（一）历史的行程"></a>（一）历史的行程</h2><h3 id="1-1-简书阶段"><a href="#1-1-简书阶段" class="headerlink" title="1.1 简书阶段"></a>1.1 简书阶段</h3><p>在此之前，曾在<a href="http://www.jianshu.com/u/f9bdc00c5771" target="_blank" rel="external">简书</a>上短暂地发布过几篇博客，因为当时自己的思想还很幼稚（Naïve），加上想要搭建自己的个人博客，因此没有持续更新。在简书发布并保留到现在的博文有：</p>
<ol>
<li><a href="http://www.jianshu.com/p/5fef17a4a198" target="_blank" rel="external">产品汪的工具箱</a></li>
<li><a href="http://www.jianshu.com/p/87d9f8a1f3fd" target="_blank" rel="external">产品为什么要懂技术</a></li>
<li><a href="http://www.jianshu.com/p/62f742c7f708" target="_blank" rel="external">敏捷软件开发宣言</a></li>
<li><a href="http://www.jianshu.com/p/d24e23e99d22" target="_blank" rel="external">产品汪与时间管理</a></li>
</ol>
<p>现在回头看去，在简书上的博文都很不成熟，也未能持续更新。但它还是给我带来了一点人生的经验：</p>
<ul>
<li>第一次写博客，锻炼了自己的<strong>Writing</strong>能力；</li>
<li>为了做好自己的博客，大量浏览了国内外的优秀博客，增长了<strong>Reading</strong>经验；</li>
<li>使自己下定决心搭建个人博客，从此开始了个人博客的<strong>Coding</strong>之路。</li>
</ul>
<h3 id="1-2-探索阶段"><a href="#1-2-探索阶段" class="headerlink" title="1.2 探索阶段"></a>1.2 探索阶段</h3><p>在决定不继续更新简书，转而开始搭建个人博客之后，是经过了一段时间的探索，才选择了使用Hexo + Github Pages搭建个人博客的。<br>在这个过程中，尝试过使用<a href="http://www.mkdocs.org/" target="_blank" rel="external">MkDocs</a> 、<a href="https://ghost.org/" target="_blank" rel="external">Ghost</a> 来搭建个人博客，也曾短暂地试用过<a href="https://jekyllrb.com/" target="_blank" rel="external">Jeklly</a> ，但都不够理想。最后，选择了拥抱Hexo。<br><em>// 之前的版本，现在仅存放在本人码云的私有项目中。</em></p>
<h3 id="1-3-Marius阶段"><a href="#1-3-Marius阶段" class="headerlink" title="1.3 Marius阶段"></a>1.3 Marius阶段</h3><p>Marius是个人博客版本0的代号，取自古罗马的著名政治家盖乌斯·马略（Gaius Marius）。而后续的大版本迭代将以十二恺撒（the twelve caesars）命名，小版本迭代也将以古罗马名人命名。<br><em>// 没错，Gaius一名来自盖乌斯·尤里乌斯·恺撒（Gaius Julius Caesar）。</em></p>
<p>本阶段主要做了三件事：</p>
<ul>
<li>选用了Hexo + Github Pages搭建个人博客；</li>
<li>拟定了未来三个月阅读和写作计划；</li>
<li>做了一些产品原型和前端技术的相关练习。</li>
</ul>
<h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><p>搭建个人博客的过程，其实也是一次产品迭代的过程。从一开始的简书，到后来的曲折探索，再到Marius版本的发布，每个阶段的变化都很大，甚至可以说，每个阶段的产出都是截然不同的。但关键在于，这三个阶段都始终紧紧围绕着解决<strong>建设个人博客</strong>这一个问题来展开，每个阶段所选用的解决方案都是最符合当时实际情况的，并且每个阶段都比上个阶段更进一步，为建设个人博客问题提供了<strong>更可靠、更高效、更惊艳</strong>的解决方式，也就是本人追求的——<strong>在持续寻找问题的更优解过程中，让正确的事情相继发生</strong>。这样说略显抽象，下面举个造汽车的例子来说明：</p>
<p><img src="http://blog.crisp.se/wp-content/uploads/2016/01/mvp.png" alt="mvp"></p>
<ol>
<li>需要一辆小汽车，解决从A点移动到B点的问题，并满足需求方对汽车的其他需求（如舒适性、安全性）；</li>
<li>有两种造车方法，一种是传统的从轮子到底盘再到车身一部分一部分地制造，另一种是先造一个滑板再到滑轮、自行车、摩托车最后才是小汽车；</li>
<li>第一种方法只有到最后造出车了，才能验证它是否能解决问题、满足需求，一旦最后不能完全满足需求（可能性很高），将带来较差的体验和巨大的成本；</li>
<li>后一种方法可以持续验证的基础上不断迭代，在满足基本需求(从A点移动到B点)的前提下，每个阶段逐步优化产品、提升体验；</li>
<li>而后一种，其实就是前面所提到的持续寻找问题的更优解，它在解决问题的基础上，持续为问题的解决提供更优解。</li>
</ol>
<p>这其实也是本人所理解的MVP（最小可行化产品），可能还有些偏差，为了让大家能更直观地了解这种思想，可以点击查看<a href="http://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp" target="_blank" rel="external">该文章</a>。</p>
<h2 id="（二）立Flag"><a href="#（二）立Flag" class="headerlink" title="（二）立Flag"></a>（二）立Flag</h2><p>未来两个多月（2017/10-2017/12）主要有两个任务，制作个人Hexo主题和丰富博客内容（至少5~6篇博文）。<br>立一个Flag，本博文将持续更新，用于将来各阶段的回顾和反思。</p>
<p><em>未完待续······</em></p>
]]></content>
      
        <categories>
            
            <category> 项目介绍 </category>
            
            <category> Gaius Blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> D&amp;B </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo + GitHub Pages搭建个人博客]]></title>
      <url>/2017/10/15/article_0001/</url>
      <content type="html"><![CDATA[<p>今天刚建好博客，还没什么内容可以放上来，就先从如何搭建个人博客（毕竟在这走了不少弯路）开始，写一篇微小的教程吧！<br>首先，笔者的个人博客是使用Hexo + GitHub Pages搭建的。至于为什么要使用Hexo来搭建个人博客，而不是GitHub Pages钦定的jeklly，这和笔者被jeklly坑过完全没关系，主要是Hexo足够快速、简洁和高效。不过这里不展开介绍了，详细介绍可以看<a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a>，英语不好的同学点<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">这里</a>。接着，我们先从<strong>Hexo的安装与常用命令</strong>开始，介绍如何使用Hexo + GitHub Pages搭建个人博客。</p>
<p><em>// 笔者系统环境为win10</em></p>
<h2 id="Hexo的安装与常用命令"><a href="#Hexo的安装与常用命令" class="headerlink" title="Hexo的安装与常用命令"></a>Hexo的安装与常用命令</h2><h3 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h3><p>在安装Hexo前，需要先安装Noed.js以及Git，如果还未接触过两者，可参考下面的链接。</p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">下载Node.js</a></li>
<li><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">Node.js的安装和配置</a></li>
<li><a href="https://git-scm.com/download/" target="_blank" rel="external">下载Git</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="external">安装Git</a></li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>完成Noed.js和Git的安装后，先别急，花几分钟看看如何使用<a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="external">NPM</a>，然后在命令行中按下面的代码进行操作。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ md hexo/blog <span class="comment"># 创建hexo文件夹，win用户为\</span></div><div class="line">$ <span class="built_in">cd</span> hexo <span class="comment"># 进入hexo文件夹</span></div><div class="line">$ npm install hexo-cli -g <span class="comment"># 使用 npm 安装 Hexo</span></div><div class="line">$ hexo init blog </div><div class="line">$ <span class="built_in">cd</span> blog </div><div class="line">$ npm install</div><div class="line">$ hexo g <span class="comment"># == hexo generate，生成静态网站</span></div><div class="line">$ hexo s <span class="comment"># == hexo server，启动服务器</span></div></pre></td></tr></table></figure>
<p>完成上述操作后，打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>访问结果。</p>
<h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><blockquote>
<ol>
<li>hexo g(hexo generate) 生成静态文件</li>
<li>hexo s(hexo server) 启动本地web服务，用于预览</li>
<li>hexo d(hexo deploy) 部署到远端（如github）</li>
<li>hexo n(hexo new) 新建页面或文章</li>
<li>hexo v(hexo version) 查看版本信息</li>
<li>hexo help <command> 查看命令帮助</li>
<li>hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>
<li>hexo list <type> 列出网站资料</type></li>
</ol>
</blockquote>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><h3 id="Github-Pages介绍"><a href="#Github-Pages介绍" class="headerlink" title="Github Pages介绍"></a>Github Pages介绍</h3><p>GitHub Pages是全球最大同性交友网站<a href="https://github.io" target="_blank" rel="external">GitHub</a>免费提供给开发者的一款介绍托管项目的产品，多用于建设个人主页或项目介绍，因为本文侧重讲如何用Hexo + GitHub Pages搭建个人博客，这里就不做太多展开了，想要了解GitHub Pages的同学可以看下面两个链接：</p>
<ul>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages主页</a></li>
<li><a href="http://www.jianshu.com/p/c5d5cb61d4e9" target="_blank" rel="external">给懒癌患者看的GitHub Pages手册</a></li>
</ul>
<h3 id="部署Hexo到Github-Pages"><a href="#部署Hexo到Github-Pages" class="headerlink" title="部署Hexo到Github Pages"></a>部署Hexo到Github Pages</h3><p>最激动人心的一步来了，将Hexo部署到Github Pages后，就可以在你的github.io上看到Hexo搭建的个人博客。不过，首先让我们明确要做什么，基本上部署到Github Pages就是两步：<code>hexo g</code> 生成静态网站和<code>git commit</code>提交代码，但具体操作需要使用hexo deploy或git命令行。</p>
<h3 id="使用hexo-deploy部署"><a href="#使用hexo-deploy部署" class="headerlink" title="使用hexo deploy部署"></a>使用hexo deploy部署</h3><p>使用hexo deploy部署，首先要安装一个拓展：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-deployer-git</div></pre></td></tr></table></figure>
<p>接着要在配置文件<code>blog\_config.yml</code>的<code># Deployment</code>下做如下修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:jiji262/jiji262.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>然后在命令行中执行如下代码，即可完成部署。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d <span class="comment"># 等同于hexo deploy</span></div></pre></td></tr></table></figure>
<p>// 关于使用hexo deploy部署，可参考<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">这个链接</a></p>
<h3 id="使用git命令行部署"><a href="#使用git命令行部署" class="headerlink" title="使用git命令行部署"></a>使用git命令行部署</h3><p>使用git命令行进行部署也很简单，只需要先在<code>blog</code>下创建一个<code>.deploy</code>文件夹，再将创建的<code>repo</code>克隆(clone)到本地，然后按如下代码部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> d:/hexo/blog</div><div class="line">$ git <span class="built_in">clone</span> git@github.com:gaiusyao/gaiusyao.github.io.git .deploy/jiji262.github.io</div><div class="line">$ hexo g <span class="comment"># 等同于hexo generate</span></div><div class="line">$ cp -R public/* .deploy/gaiusyao.github.io <span class="comment">#拷贝blog/public文件夹内容到git目录下</span></div><div class="line">$ <span class="built_in">cd</span> .deploy/jiji262.github.io</div><div class="line">$ git add .</div><div class="line">$ git commit -m “update blog”</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><h3 id="使用Hexo主题"><a href="#使用Hexo主题" class="headerlink" title="使用Hexo主题"></a>使用Hexo主题</h3><p>使用Hexo非常简单，首先在Hexo官网的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题页面</a>挑选适合的主题，这里推荐笔者朋友的<a href="https://github.com/GeekaholicLin/hexo-theme-ylion" target="_blank" rel="external">yolin</a>主题，然后在blog下使用命令行执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/GeekaholicLin/hexo-theme-ylion.git themes/yolin</div></pre></td></tr></table></figure>
<p>修改<code>blog</code>目录下的<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>yolin</code>，即可使用新的Hexo主题。</p>
<h3 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h3><p>Hexo主题的配置和你所采用的主题有关，不同的主题需要不同的配置，主题的配置文件是<code>blog\themes</code>文件夹下的<code>_config.yml</code>。下面，以笔者使用的<code>raytaylorism</code>为例，介绍Hexo主题的配置项：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">menu: <span class="comment"># 菜单配置（若不需要某项可直接删除）</span></div><div class="line">    - id: home</div><div class="line">        link: /</div><div class="line">        icon: home</div><div class="line">        class: menu-home</div><div class="line">    - id: archives</div><div class="line">        link: /archives</div><div class="line">        icon: archive</div><div class="line">        class: menu-archive</div><div class="line">    - id: category</div><div class="line">        link: javascript:;</div><div class="line">        category: <span class="literal">true</span></div><div class="line">        icon: bookmark</div><div class="line">        class: menu-category</div><div class="line">    - id: reading</div><div class="line">        link: /reading</div><div class="line">        icon: book</div><div class="line">        class: menu-reading</div><div class="line">    - id: about</div><div class="line">        link: /about</div><div class="line">        icon: user</div><div class="line">        class: menu-about</div><div class="line"></div><div class="line">color: <span class="comment"># 颜色配置</span></div><div class="line">  header: blue</div><div class="line">  footer: blue</div><div class="line">  page_nav: blue</div><div class="line">  side_nav: blue darken-1</div><div class="line">  tag: deep-orange lighten-1</div><div class="line">  article_title_link: blue</div><div class="line">  link: deep-orange</div><div class="line">  pagination: deep-orange</div><div class="line">  tab: deep-orange</div><div class="line">  archive_item: grey</div><div class="line">  fab: deep-orange</div><div class="line">  fab_2: cyan</div><div class="line">  fab_3: orange darken-1</div><div class="line">  new: deep-orange</div><div class="line">  about_header: blue</div><div class="line">  about_title: blue</div><div class="line"></div><div class="line">archive_yearly: <span class="literal">true</span></div><div class="line"></div><div class="line">copyright: © 2017 Gaius-Yao, All rights reserved. <span class="comment"># 版权信息</span></div><div class="line"></div><div class="line">disqus_shortname: <span class="comment"># Disqus评论shortname，若为空则不启用</span></div><div class="line">duoshuo_shortname: <span class="comment"># 多说shortname，若为空则不启用</span></div><div class="line">yungentie_product_key: <span class="comment"># 网易云跟帖productKey，从通用代码中获取，若为空则不启用</span></div><div class="line">google_analytics: <span class="comment"># Google分析track id，若为空则不启用</span></div><div class="line">tencent_analytics: 63863615 <span class="comment"># 腾讯分析sId，若为空则不启用</span></div><div class="line">google_code_prettify: prettify-tomorrow-night-eighties <span class="comment"># 高亮的主题，若为空则使用默认主题</span></div><div class="line"></div><div class="line">mathjax: <span class="literal">true</span> <span class="comment"># 是否启用MathJax数学公式渲染。如果你确认整个站点的博文都不会用到Latex数学公式，可以将其该项设为false提高页面加载速度</span></div><div class="line">page_stat: <span class="literal">true</span> <span class="comment"># 是否启用网页计数器</span></div></pre></td></tr></table></figure>
<h3 id="创建Hexo主题"><a href="#创建Hexo主题" class="headerlink" title="创建Hexo主题"></a>创建Hexo主题</h3><p>详见下篇Hexo教程——<a href="#">制作Hexo主题</a>。</p>
<h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><p>Hexo写博客极其简单，可以执行下列命令来创建一篇新文章：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<h3 id="布局-Layout-和标题-tilte"><a href="#布局-Layout-和标题-tilte" class="headerlink" title="布局(Layout)和标题(tilte)"></a>布局(Layout)和标题(tilte)</h3><p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径：</p>
<blockquote>
<ul>
<li>post:  source/_posts</li>
<li>page:  source</li>
<li>draft: source/_drafts<br>而自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</li>
</ul>
</blockquote>
<p>Hexo 默认以标题做为文件名称，但也可以在<code>_config.yml</code>编辑’new_post_name’修改默认文件名称。</p>
<h3 id="写作和草稿"><a href="#写作和草稿" class="headerlink" title="写作和草稿"></a>写作和草稿</h3><p>Hexo写作采用<a href="http://www.jianshu.com/p/075d7cac8fef" target="_blank" rel="external">markdown语法</a>，完成后使用<code>hexo g</code>即可生成静态html页面。</p>
<p>而使用上一部分提到的<code>draft</code>布局创建的文章，在建立时会被保存到<code>source/_drafts</code>文件夹，可以通过<code>publish</code>命令将其移到<code>source/_posts</code>文件夹内发布：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<h3 id="模板-Scaffold"><a href="#模板-Scaffold" class="headerlink" title="模板(Scaffold)"></a>模板(Scaffold)</h3><p>在新建文章时，Hexo会根据<code>scaffolds</code>文件夹内相对应的文件（即模板）来建立文件，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new photo <span class="string">"My Gallery"</span></div></pre></td></tr></table></figure>
<p>在执行这行指令时，Hexo 会尝试在<code>scaffolds</code>文件夹中寻找<code>photo.md</code>，并根据其内容建立文章，以下是可以在模版中使用的变量：</p>
<blockquote>
<ul>
<li>layout: 布局</li>
<li>title:  标题</li>
<li>date:   文件建立日期</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 代码之路 </category>
            
            <category> 微小的教程 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Coding </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
